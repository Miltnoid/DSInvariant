2019-11-16 17:41:21.121930-05:00

2019-11-16 17:41:21.122374-05:00
DSInfer========================================================================
2019-11-16 17:41:21.123326-05:00
Answer list length: 2
2019-11-16 17:41:21.123341-05:00
Candidate invariant: fun (x:rbtree) -> False
2019-11-16 17:41:21.124434-05:00
Checking boundary for:Leaf
2019-11-16 17:41:21.124956-05:00
Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Leaf\", (Value.Tuple [])))")
                                               Comes from
                                               ()
2019-11-16 17:41:21.124978-05:00
Answer list length: 1
2019-11-16 17:41:21.124983-05:00
Candidate invariant: fun (x:rbtree) -> True
2019-11-16 17:41:21.125275-05:00
Checking boundary for:Leaf
2019-11-16 17:41:21.125726-05:00
Safe
2019-11-16 17:41:21.125732-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 17:41:21.126382-05:00
Safe
2019-11-16 17:41:21.137414-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 17:41:21.138118-05:00
Safe
2019-11-16 17:41:21.138125-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 17:41:21.139704-05:00
Safe
2019-11-16 17:41:21.139713-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 17:41:21.166169-05:00
Safe
2019-11-16 17:41:21.166193-05:00
verifying proves postcondition
2019-11-16 17:41:22.540655-05:00
postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Red\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))""(Value.Ctor (\"Leaf\", (Value.Tuple [])))")
2019-11-16 17:41:22.540769-05:00
testbed
2019-11-16 17:41:22.540784-05:00
{ TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Red", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests = [(Value.Ctor ("Leaf", (Value.Tuple [])))] }
2019-11-16 17:41:22.580112-05:00
Answer list length: 2
2019-11-16 17:41:22.580136-05:00
Candidate invariant: fun (r1:rbtree) -> nat_lte (size r1) (size empty)
2019-11-16 17:41:22.580505-05:00
Checking boundary for:Leaf
2019-11-16 17:41:22.581008-05:00
Safe
2019-11-16 17:41:22.581013-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 17:41:22.581527-05:00
Safe
2019-11-16 17:41:22.581532-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 17:41:22.582012-05:00
Safe
2019-11-16 17:41:22.582017-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 17:41:22.595068-05:00
Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Leaf\", (Value.Tuple [])))")
2019-11-16 17:41:22.621907-05:00
Answer list length: 1
2019-11-16 17:41:22.621928-05:00
Candidate invariant: fun (x:rbtree) -> True
2019-11-16 17:41:22.622790-05:00
Checking boundary for:Leaf
2019-11-16 17:41:22.623806-05:00
Safe
2019-11-16 17:41:22.623818-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 17:41:22.624946-05:00
Safe
2019-11-16 17:41:22.624954-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 17:41:22.625872-05:00
Safe
2019-11-16 17:41:22.625880-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 17:41:22.653384-05:00
Safe
2019-11-16 17:41:22.653395-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 17:41:22.700460-05:00
Safe
2019-11-16 17:41:22.700479-05:00
Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Red\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 17:41:22.700646-05:00
testbed
2019-11-16 17:41:22.700650-05:00
{ TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Red", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Black", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 17:41:22.895084-05:00
Answer list length: 2
2019-11-16 17:41:22.895124-05:00
Candidate invariant: fun (r1:rbtree) ->
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match c1 with
                                          | Red N_fresh_var_1 -> False
                                          | Black N_fresh_var_1 -> True)
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 17:41:22.895536-05:00
Checking boundary for:Leaf
2019-11-16 17:41:22.896060-05:00
Safe
2019-11-16 17:41:22.896067-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 17:41:22.896618-05:00
Safe
2019-11-16 17:41:22.896624-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 17:41:22.897157-05:00
Safe
2019-11-16 17:41:22.897162-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 17:41:22.947303-05:00
Safe
2019-11-16 17:41:22.947317-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 17:41:23.040335-05:00
Safe
2019-11-16 17:41:23.040349-05:00
verifying proves postcondition
2019-11-16 17:41:24.491275-05:00
postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))""(Value.Ctor (\"Leaf\", (Value.Tuple [])))")
2019-11-16 17:41:24.491585-05:00
testbed
2019-11-16 17:41:24.491591-05:00
{ TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Red", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Black", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 17:41:24.557334-05:00
Answer list length: 3
2019-11-16 17:41:24.557354-05:00
Candidate invariant: fix f1 (r1:rbtree) : bool =
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match c1 with
                                          | Red N_fresh_var_1 -> False
                                          | Black N_fresh_var_1 -> f1 r2)
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 17:41:24.599671-05:00
Checking boundary for:Leaf
2019-11-16 17:41:24.600886-05:00
Safe
2019-11-16 17:41:24.600898-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 17:41:24.602066-05:00
Safe
2019-11-16 17:41:24.602078-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 17:41:24.603072-05:00
Safe
2019-11-16 17:41:24.603080-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 17:41:24.655661-05:00
Safe
2019-11-16 17:41:24.655674-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 17:41:24.760303-05:00
Safe
2019-11-16 17:41:24.760316-05:00
verifying proves postcondition
2019-11-16 17:41:26.175774-05:00
postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))""(Value.Ctor (\"Leaf\", (Value.Tuple [])))")
2019-11-16 17:41:26.177530-05:00
testbed
2019-11-16 17:41:26.177542-05:00
{ TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Red", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Black", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 17:41:26.382305-05:00
Answer list length: 4
2019-11-16 17:41:26.382331-05:00
Candidate invariant: fun (r1:rbtree) ->
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match c1 with
                                          | Red N_fresh_var_1 -> False
                                          | Black N_fresh_var_1 -> lookup r1
                                                                    (size r2))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 17:41:26.382690-05:00
Checking boundary for:Leaf
2019-11-16 17:41:26.383417-05:00
Safe
2019-11-16 17:41:26.383423-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 17:41:26.402038-05:00
Safe
2019-11-16 17:41:26.402051-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 17:41:26.403222-05:00
Safe
2019-11-16 17:41:26.403243-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 17:41:26.459779-05:00
Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Leaf\", (Value.Tuple [])))")
2019-11-16 17:41:26.460364-05:00
Answer list length: 3
2019-11-16 17:41:26.460381-05:00
Candidate invariant: fix f1 (r1:rbtree) : bool =
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match c1 with
                                          | Red N_fresh_var_1 -> False
                                          | Black N_fresh_var_1 -> f1 r2)
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 17:41:26.515790-05:00
Checking boundary for:Leaf
2019-11-16 17:41:26.516807-05:00
Safe
2019-11-16 17:41:26.516815-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 17:41:26.517500-05:00
Safe
2019-11-16 17:41:26.517507-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 17:41:26.570310-05:00
Safe
2019-11-16 17:41:26.570322-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 17:41:26.629347-05:00
Safe
2019-11-16 17:41:26.629365-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 17:41:26.683544-05:00
Safe
2019-11-16 17:41:26.683558-05:00
Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 17:41:26.733568-05:00
testbed
2019-11-16 17:41:26.733581-05:00
{ TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Red", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Black", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 17:41:26.859436-05:00
Answer list length: 4
2019-11-16 17:41:26.859458-05:00
Candidate invariant: fun (r1:rbtree) ->
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match c1 with
                                          | Red N_fresh_var_1 -> False
                                          | Black N_fresh_var_1 -> nat_lte
                                                                    (size r2)
                                                                    n1)
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 17:41:26.896970-05:00
Checking boundary for:Leaf
2019-11-16 17:41:26.897771-05:00
Safe
2019-11-16 17:41:26.897780-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 17:41:26.898564-05:00
Safe
2019-11-16 17:41:26.898571-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 17:41:26.951295-05:00
Safe
2019-11-16 17:41:26.951303-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 17:41:27.016404-05:00
Safe
2019-11-16 17:41:27.016419-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 17:41:27.069852-05:00
Safe
2019-11-16 17:41:27.069869-05:00
verifying proves postcondition
2019-11-16 17:41:28.543794-05:00
postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))""(Value.Ctor (\"Leaf\", (Value.Tuple [])))")
2019-11-16 17:41:28.547155-05:00
testbed
2019-11-16 17:41:28.547169-05:00
{ TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Red", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Black", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 17:41:28.872194-05:00
Answer list length: 5
2019-11-16 17:41:28.872236-05:00
Candidate invariant: fun (r1:rbtree) ->
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match c1 with
                                          | Red N_fresh_var_1 -> False
                                          | Black N_fresh_var_1 -> nat_eq
                                                                    (size r3)
                                                                    (size r2))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 17:41:28.872644-05:00
Checking boundary for:Leaf
2019-11-16 17:41:28.873178-05:00
Safe
2019-11-16 17:41:28.873184-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 17:41:28.873788-05:00
Safe
2019-11-16 17:41:28.873794-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 17:41:28.874422-05:00
Safe
2019-11-16 17:41:28.874428-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 17:41:28.927550-05:00
Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 17:41:28.978305-05:00
Answer list length: 4
2019-11-16 17:41:28.978333-05:00
Candidate invariant: fun (r1:rbtree) ->
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match c1 with
                                          | Red N_fresh_var_1 -> False
                                          | Black N_fresh_var_1 -> nat_lte
                                                                    (size r2)
                                                                    n1)
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 17:41:29.033967-05:00
Checking boundary for:Leaf
2019-11-16 17:41:29.035621-05:00
Safe
2019-11-16 17:41:29.035634-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 17:41:29.036881-05:00
Safe
2019-11-16 17:41:29.036893-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 17:41:29.086427-05:00
Safe
2019-11-16 17:41:29.086439-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 17:41:29.095127-05:00
Safe
2019-11-16 17:41:29.095141-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 17:41:29.208652-05:00
Safe
2019-11-16 17:41:29.208676-05:00
Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 17:41:29.211170-05:00
testbed
2019-11-16 17:41:29.251798-05:00
{ TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Red", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Black", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Black", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 17:41:29.765841-05:00
Answer list length: 5
2019-11-16 17:41:29.765892-05:00
Candidate invariant: fun (r1:rbtree) ->
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match c1 with
                                          | Red N_fresh_var_1 -> False
                                          | Black N_fresh_var_1 -> not
                                                                    (lookup
                                                                    (delete
                                                                    r1 n1) n1))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 17:41:29.766319-05:00
Checking boundary for:Leaf
2019-11-16 17:41:29.766957-05:00
Safe
2019-11-16 17:41:29.820368-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 17:41:29.821157-05:00
Safe
2019-11-16 17:41:29.821164-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 17:41:29.821873-05:00
Safe
2019-11-16 17:41:29.821880-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 17:41:29.891765-05:00
Safe
2019-11-16 17:41:29.891793-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 17:41:29.944325-05:00
Safe
2019-11-16 17:41:29.944346-05:00
verifying proves postcondition
2019-11-16 17:41:41.651428-05:00
postcondition proven
2019-11-16 17:41:41.651471-05:00
verifying: Leaf
2019-11-16 17:41:41.652076-05:00
Safe
2019-11-16 17:41:41.652082-05:00
verifying: fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 17:41:41.652689-05:00
Safe
2019-11-16 17:41:41.652695-05:00
verifying: fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 17:41:41.653300-05:00
Safe
2019-11-16 17:41:41.653306-05:00
verifying: fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 17:41:46.607833-05:00
Not a LR, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Node\",\n                   (Value.Tuple\n                      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                        (Value.Ctor (\"S\",\n                           (Value.Ctor (\"O\", (Value.Tuple [])))));\n                        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                   ));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Node\",\n                   (Value.Tuple\n                      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                        (Value.Ctor (\"S\",\n                           (Value.Ctor (\"O\", (Value.Tuple [])))));\n                        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                   ));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 17:41:46.678748-05:00
testbed
2019-11-16 17:41:46.678763-05:00
{ TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Red", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("O", (Value.Tuple [])))));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Black", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Black", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 17:41:47.158570-05:00
Answer list length: 6
2019-11-16 17:41:47.158613-05:00
Candidate invariant: fun (r1:rbtree) ->
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match c1 with
                                          | Red N_fresh_var_1 -> False
                                          | Black N_fresh_var_1 -> not
                                                                    (lookup
                                                                    (union r3
                                                                    r2) n1))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 17:41:47.159030-05:00
Checking boundary for:Leaf
2019-11-16 17:41:47.159639-05:00
Safe
2019-11-16 17:41:47.213298-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 17:41:47.214606-05:00
Safe
2019-11-16 17:41:47.214625-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 17:41:47.215725-05:00
Safe
2019-11-16 17:41:47.215737-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 17:41:47.291312-05:00
Safe
2019-11-16 17:41:47.291332-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 17:41:47.344771-05:00
Safe
2019-11-16 17:41:47.344789-05:00
verifying proves postcondition
2019-11-16 17:41:58.999707-05:00
postcondition proven
2019-11-16 17:41:58.999749-05:00
verifying: Leaf
2019-11-16 17:41:59.000354-05:00
Safe
2019-11-16 17:41:59.000363-05:00
verifying: fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 17:41:59.000936-05:00
Safe
2019-11-16 17:41:59.000944-05:00
verifying: fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 17:41:59.001589-05:00
Safe
2019-11-16 17:41:59.001595-05:00
verifying: fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 17:42:08.379117-05:00
Safe
2019-11-16 17:42:08.379160-05:00
verifying: fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 17:42:08.420999-05:00
Not a LR, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Red\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 17:42:08.448791-05:00
testbed
2019-11-16 17:42:08.448805-05:00
{ TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Red", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("O", (Value.Tuple [])))));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Black", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Black", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 17:42:11.114358-05:00
Answer list length: 7
2019-11-16 17:42:11.114401-05:00
Candidate invariant: fix f1 (r1:rbtree) : bool =
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match c1 with
                                          | Red N_fresh_var_1 -> False
                                          | Black N_fresh_var_1 -> and
                                                                    (f1 r3)
                                                                    (nat_lte
                                                                    (size r2)
                                                                    n1))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 17:42:11.114831-05:00
Checking boundary for:Leaf
2019-11-16 17:42:11.173310-05:00
Safe
2019-11-16 17:42:11.173322-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 17:42:11.174657-05:00
Safe
2019-11-16 17:42:11.174666-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 17:42:11.175432-05:00
Safe
2019-11-16 17:42:11.175439-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 17:42:11.240192-05:00
Safe
2019-11-16 17:42:11.240212-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 17:42:11.352839-05:00
Safe
2019-11-16 17:42:11.352854-05:00
verifying proves postcondition
2019-11-16 17:42:12.800844-05:00
postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))""(Value.Ctor (\"Leaf\", (Value.Tuple [])))")
2019-11-16 17:42:12.807626-05:00
testbed
2019-11-16 17:42:12.807635-05:00
{ TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Red", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("O", (Value.Tuple [])))));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Black", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Black", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 17:42:36.108025-05:00
Answer list length: 8
2019-11-16 17:42:36.108060-05:00
Candidate invariant: fix f1 (r1:rbtree) : bool =
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match union r3 r2 with
                                          | Leaf N_fresh_var_1 -> (match c1 with
                                                                    | Red N_fresh_var_2 -> 
                                                                    False
                                                                    | Black N_fresh_var_2 -> 
                                                                    True)
                                          | Node N_fresh_var_1 -> (fun (c2:unit) ->
                                                                    (fun (r4:unit) ->
                                                                    (fun (n2:unit) ->
                                                                    (fun (r5:unit) ->
                                                                    and
                                                                    (lookup
                                                                    r3
                                                                    (size r3))
                                                                    (f1 r3))
                                                                    (#4
                                                                    N_fresh_var_1))
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (#2
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #1
                                                                    N_fresh_var_1))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 17:42:36.223013-05:00
Checking boundary for:Leaf
2019-11-16 17:42:36.224442-05:00
Safe
2019-11-16 17:42:36.224469-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 17:42:36.225617-05:00
Safe
2019-11-16 17:42:36.225633-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 17:42:36.280998-05:00
Safe
2019-11-16 17:42:36.281015-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 17:42:36.287455-05:00
Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 17:42:36.342849-05:00
Answer list length: 7
2019-11-16 17:42:36.342867-05:00
Candidate invariant: fix f1 (r1:rbtree) : bool =
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match c1 with
                                          | Red N_fresh_var_1 -> False
                                          | Black N_fresh_var_1 -> and
                                                                    (f1 r3)
                                                                    (nat_lte
                                                                    (size r2)
                                                                    n1))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 17:42:36.395387-05:00
Checking boundary for:Leaf
2019-11-16 17:42:36.396769-05:00
Safe
2019-11-16 17:42:36.396782-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 17:42:36.453940-05:00
Safe
2019-11-16 17:42:36.453952-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 17:42:36.455135-05:00
Safe
2019-11-16 17:42:36.455146-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 17:42:36.526474-05:00
Safe
2019-11-16 17:42:36.526491-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 17:42:36.579809-05:00
Safe
2019-11-16 17:42:36.579824-05:00
Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 17:42:36.674765-05:00
Answer list length: 8
2019-11-16 17:42:36.674790-05:00
Candidate invariant: fix f1 (r1:rbtree) : bool =
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match delete r1 (min_val r1) with
                                          | Leaf N_fresh_var_1 -> (match c1 with
                                                                    | Red N_fresh_var_2 -> 
                                                                    False
                                                                    | Black N_fresh_var_2 -> 
                                                                    True)
                                          | Node N_fresh_var_1 -> (fun (c2:unit) ->
                                                                    (fun (r4:unit) ->
                                                                    (fun (n2:unit) ->
                                                                    (fun (r5:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1 n2)
                                                                    (f1 r3))
                                                                    (#4
                                                                    N_fresh_var_1))
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (#2
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #1
                                                                    N_fresh_var_1))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 17:42:36.732980-05:00
Checking boundary for:Leaf
2019-11-16 17:42:36.734395-05:00
Safe
2019-11-16 17:42:36.790433-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 17:42:36.791711-05:00
Safe
2019-11-16 17:42:36.791722-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 17:42:36.792857-05:00
Safe
2019-11-16 17:42:36.792868-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 17:42:36.864609-05:00
Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 17:42:36.906171-05:00
Answer list length: 7
2019-11-16 17:42:36.906190-05:00
Candidate invariant: fix f1 (r1:rbtree) : bool =
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match c1 with
                                          | Red N_fresh_var_1 -> False
                                          | Black N_fresh_var_1 -> and
                                                                    (f1 r3)
                                                                    (nat_lte
                                                                    (size r2)
                                                                    n1))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 17:42:36.958121-05:00
Checking boundary for:Leaf
2019-11-16 17:42:36.959347-05:00
Safe
2019-11-16 17:42:36.959360-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 17:42:36.960356-05:00
Safe
2019-11-16 17:42:36.960368-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 17:42:37.012429-05:00
Safe
2019-11-16 17:42:37.012446-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 17:42:37.032906-05:00
Safe
2019-11-16 17:42:37.032923-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 17:42:37.139880-05:00
Safe
2019-11-16 17:42:37.139897-05:00
Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 17:42:37.186620-05:00
testbed
2019-11-16 17:42:37.186634-05:00
{ TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Red", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("O", (Value.Tuple [])))));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Black", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Black", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 17:43:16.184851-05:00
Answer list length: 8
2019-11-16 17:43:16.184899-05:00
Candidate invariant: fun (r1:rbtree) ->
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match delete r1 (min_val r1) with
                                          | Leaf N_fresh_var_1 -> (match c1 with
                                                                    | Red N_fresh_var_3 -> 
                                                                    False
                                                                    | Black N_fresh_var_3 -> 
                                                                    nat_lte
                                                                    n1
                                                                    (size r1))
                                          | Node N_fresh_var_1 -> (fun (c2:unit) ->
                                                                    (fun (r4:unit) ->
                                                                    (fun (n2:unit) ->
                                                                    (fun (r5:unit) ->
                                                                    match c2 with
                                                                    | Red N_fresh_var_2 -> 
                                                                    False
                                                                    | Black N_fresh_var_2 -> 
                                                                    nat_lt
                                                                    (size
                                                                    empty) n2)
                                                                    (#4
                                                                    N_fresh_var_1))
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (#2
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #1
                                                                    N_fresh_var_1))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 17:43:16.299502-05:00
Checking boundary for:Leaf
2019-11-16 17:43:16.300953-05:00
Safe
2019-11-16 17:43:16.300970-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 17:43:16.302015-05:00
Safe
2019-11-16 17:43:16.302031-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 17:43:16.358168-05:00
Safe
2019-11-16 17:43:16.358180-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 17:43:16.415879-05:00
Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Leaf\", (Value.Tuple [])))")
2019-11-16 17:43:16.421094-05:00
Answer list length: 7
2019-11-16 17:43:16.421108-05:00
Candidate invariant: fix f1 (r1:rbtree) : bool =
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match c1 with
                                          | Red N_fresh_var_1 -> False
                                          | Black N_fresh_var_1 -> and
                                                                    (f1 r3)
                                                                    (nat_lte
                                                                    (size r2)
                                                                    n1))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 17:43:16.470874-05:00
Checking boundary for:Leaf
2019-11-16 17:43:16.472115-05:00
Safe
2019-11-16 17:43:16.472128-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 17:43:16.524320-05:00
Safe
2019-11-16 17:43:16.524336-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 17:43:16.525580-05:00
Safe
2019-11-16 17:43:16.525592-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 17:43:16.603985-05:00
Safe
2019-11-16 17:43:16.604005-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 17:43:16.656305-05:00
Safe
2019-11-16 17:43:16.656322-05:00
Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 17:43:16.842150-05:00
testbed
2019-11-16 17:43:16.842189-05:00
{ TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Red", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("O", (Value.Tuple [])))));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Black", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("S",
              (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 17:43:44.817420-05:00
Answer list length: 8
2019-11-16 17:43:44.817465-05:00
Candidate invariant: fix f1 (r1:rbtree) : bool =
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match delete r1 (min_val r1) with
                                          | Leaf N_fresh_var_1 -> (match c1 with
                                                                    | Red N_fresh_var_2 -> 
                                                                    False
                                                                    | Black N_fresh_var_2 -> 
                                                                    True)
                                          | Node N_fresh_var_1 -> (fun (c2:unit) ->
                                                                    (fun (r4:unit) ->
                                                                    (fun (n2:unit) ->
                                                                    (fun (r5:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    (size
                                                                    empty) n2)
                                                                    (f1 r3))
                                                                    (#4
                                                                    N_fresh_var_1))
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (#2
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #1
                                                                    N_fresh_var_1))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 17:43:44.875387-05:00
Checking boundary for:Leaf
2019-11-16 17:43:44.876823-05:00
Safe
2019-11-16 17:43:44.876837-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 17:43:44.877895-05:00
Safe
2019-11-16 17:43:44.877906-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 17:43:44.933420-05:00
Safe
2019-11-16 17:43:44.933436-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 17:43:45.009561-05:00
Safe
2019-11-16 17:43:45.009586-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 17:43:45.081011-05:00
Safe
2019-11-16 17:43:45.081037-05:00
verifying proves postcondition
2019-11-16 17:43:46.670045-05:00
postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Red\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))""(Value.Ctor (\"Leaf\", (Value.Tuple [])))")
2019-11-16 17:43:46.704802-05:00
testbed
2019-11-16 17:43:46.704821-05:00
{ TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Red", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("O", (Value.Tuple [])))));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Black", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("S",
              (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 17:44:16.164784-05:00
Answer list length: 9
2019-11-16 17:44:16.164829-05:00
Candidate invariant: fix f1 (r1:rbtree) : bool =
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match delete r1 (min_val r1) with
                                          | Leaf N_fresh_var_1 -> (match c1 with
                                                                    | Red N_fresh_var_2 -> 
                                                                    False
                                                                    | Black N_fresh_var_2 -> 
                                                                    True)
                                          | Node N_fresh_var_1 -> (fun (c2:unit) ->
                                                                    (fun (r4:unit) ->
                                                                    (fun (n2:unit) ->
                                                                    (fun (r5:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    (min_val
                                                                    r1) n2)
                                                                    (f1 r3))
                                                                    (#4
                                                                    N_fresh_var_1))
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (#2
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #1
                                                                    N_fresh_var_1))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 17:44:16.279687-05:00
Checking boundary for:Leaf
2019-11-16 17:44:16.281643-05:00
Safe
2019-11-16 17:44:16.281658-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 17:44:16.282631-05:00
Safe
2019-11-16 17:44:16.282639-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 17:44:16.334515-05:00
Safe
2019-11-16 17:44:16.334532-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 17:44:16.477761-05:00
Safe
2019-11-16 17:44:16.477801-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 17:44:16.586518-05:00
Safe
2019-11-16 17:44:16.586539-05:00
verifying proves postcondition
2019-11-16 17:44:28.141630-05:00
postcondition proven
2019-11-16 17:44:28.141682-05:00
verifying: Leaf
2019-11-16 17:44:28.142574-05:00
Safe
2019-11-16 17:44:28.142581-05:00
verifying: fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 17:44:28.143146-05:00
Safe
2019-11-16 17:44:28.143152-05:00
verifying: fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 17:44:28.143730-05:00
Safe
2019-11-16 17:44:28.143736-05:00
verifying: fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 17:44:42.651788-05:00
Safe
2019-11-16 17:44:42.651841-05:00
verifying: fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 17:44:42.814305-05:00
Not a LR, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Red\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 17:44:42.852291-05:00
testbed
2019-11-16 17:44:42.852318-05:00
{ TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Red", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Black", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("O", (Value.Tuple [])))));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Black", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("S",
              (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 17:45:36.911222-05:00
Answer list length: 10
2019-11-16 17:45:36.911270-05:00
Candidate invariant: fun (r1:rbtree) ->
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match delete r1 n1 with
                                          | Leaf N_fresh_var_1 -> (match c1 with
                                                                    | Red N_fresh_var_3 -> 
                                                                    False
                                                                    | Black N_fresh_var_3 -> 
                                                                    True)
                                          | Node N_fresh_var_1 -> (fun (c2:unit) ->
                                                                    (fun (r4:unit) ->
                                                                    (fun (n2:unit) ->
                                                                    (fun (r5:unit) ->
                                                                    match c2 with
                                                                    | Red N_fresh_var_2 -> 
                                                                    False
                                                                    | Black N_fresh_var_2 -> 
                                                                    not
                                                                    (nat_eq
                                                                    (min_val
                                                                    r3) n1))
                                                                    (#4
                                                                    N_fresh_var_1))
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (#2
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #1
                                                                    N_fresh_var_1))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 17:45:37.021733-05:00
Checking boundary for:Leaf
2019-11-16 17:45:37.024577-05:00
Safe
2019-11-16 17:45:37.024588-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 17:45:37.025316-05:00
Safe
2019-11-16 17:45:37.025324-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 17:45:37.078858-05:00
Safe
2019-11-16 17:45:37.078874-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 17:45:37.173458-05:00
Safe
2019-11-16 17:45:37.173480-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 17:45:37.218650-05:00
Safe
2019-11-16 17:45:37.218671-05:00
verifying proves postcondition
2019-11-16 17:45:39.582651-05:00
postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Red\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))""(Value.Ctor (\"Leaf\", (Value.Tuple [])))")
2019-11-16 17:45:45.021566-05:00
Answer list length: 11
2019-11-16 17:45:45.021614-05:00
Candidate invariant: fix f1 (r1:rbtree) : bool =
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match add n1 (min_val r3) with
                                          | O N_fresh_var_1 -> (match c1 with
                                                                  | Red N_fresh_var_3 -> 
                                                                    False
                                                                  | Black N_fresh_var_3 -> 
                                                                    nat_eq
                                                                    (size r3)
                                                                    (size r2))
                                          | S N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  match c1 with
                                                                    | Red N_fresh_var_2 -> 
                                                                    False
                                                                    | Black N_fresh_var_2 -> 
                                                                    and
                                                                    (f1 r3)
                                                                    (f1 r2))
                                                                 N_fresh_var_1)
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 17:45:45.022484-05:00
Checking boundary for:Leaf
2019-11-16 17:45:45.023177-05:00
Safe
2019-11-16 17:45:45.079129-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 17:45:45.080345-05:00
Safe
2019-11-16 17:45:45.080356-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 17:45:45.081521-05:00
Safe
2019-11-16 17:45:45.081533-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 17:45:45.185872-05:00
Safe
2019-11-16 17:45:45.185893-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 17:45:45.220575-05:00
Safe
2019-11-16 17:45:45.251495-05:00
verifying proves postcondition
2019-11-16 17:45:46.732113-05:00
postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))""(Value.Ctor (\"Leaf\", (Value.Tuple [])))")
2019-11-16 17:45:46.743649-05:00
testbed
2019-11-16 17:45:46.743667-05:00
{ TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Red", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Black", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("O", (Value.Tuple [])))));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Black", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("S",
              (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 17:48:20.821205-05:00
Answer list length: 12
2019-11-16 17:48:20.821242-05:00
Candidate invariant: fix f1 (r1:rbtree) : bool =
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match delete r1 n1 with
                                          | Leaf N_fresh_var_1 -> (match c1 with
                                                                    | Red N_fresh_var_3 -> 
                                                                    False
                                                                    | Black N_fresh_var_3 -> 
                                                                    True)
                                          | Node N_fresh_var_1 -> (fun (c2:unit) ->
                                                                    (fun (r4:unit) ->
                                                                    (fun (n2:unit) ->
                                                                    (fun (r5:unit) ->
                                                                    match 
                                                                    min_val
                                                                    r3 with
                                                                    | O N_fresh_var_2 -> 
                                                                    and
                                                                    (nat_lt
                                                                    n2 n1)
                                                                    (f1 r2)
                                                                    | S N_fresh_var_2 -> 
                                                                    (fun (n3:unit) ->
                                                                    f1 r3)
                                                                    N_fresh_var_2)
                                                                    (#4
                                                                    N_fresh_var_1))
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (#2
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #1
                                                                    N_fresh_var_1))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 17:48:20.879581-05:00
Checking boundary for:Leaf
2019-11-16 17:48:20.971518-05:00
Safe
2019-11-16 17:48:20.971533-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 17:48:20.972385-05:00
Safe
2019-11-16 17:48:20.972393-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 17:48:20.973129-05:00
Safe
2019-11-16 17:48:20.973137-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 17:48:21.113413-05:00
Safe
2019-11-16 17:48:21.113437-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 17:48:21.207300-05:00
Safe
2019-11-16 17:48:21.207328-05:00
verifying proves postcondition
2019-11-16 17:48:22.649264-05:00
postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Red\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))""(Value.Ctor (\"Leaf\", (Value.Tuple [])))")
2019-11-16 17:48:39.878426-05:00
Answer list length: 13
2019-11-16 17:48:39.878478-05:00
Candidate invariant: fix f1 (r1:rbtree) : bool =
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match delete r1 n1 with
                                          | Leaf N_fresh_var_1 -> (match c1 with
                                                                    | Red N_fresh_var_3 -> 
                                                                    False
                                                                    | Black N_fresh_var_3 -> 
                                                                    True)
                                          | Node N_fresh_var_1 -> (fun (c2:unit) ->
                                                                    (fun (r4:unit) ->
                                                                    (fun (n2:unit) ->
                                                                    (fun (r5:unit) ->
                                                                    match r2 with
                                                                    | Leaf N_fresh_var_2 -> 
                                                                    and
                                                                    (nat_lt
                                                                    n1 n2)
                                                                    (f1 r3)
                                                                    | Node N_fresh_var_2 -> 
                                                                    (fun (c3:unit) ->
                                                                    (fun (r6:unit) ->
                                                                    (fun (n3:unit) ->
                                                                    (fun (r7:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n2 n1)
                                                                    (f1 r2))
                                                                    (#4
                                                                    N_fresh_var_2))
                                                                    (#3
                                                                    N_fresh_var_2))
                                                                    (#2
                                                                    N_fresh_var_2))
                                                                    (#1
                                                                    N_fresh_var_2))
                                                                    (#4
                                                                    N_fresh_var_1))
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (#2
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #1
                                                                    N_fresh_var_1))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 17:48:40.007837-05:00
Checking boundary for:Leaf
2019-11-16 17:48:40.009503-05:00
Safe
2019-11-16 17:48:40.009519-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 17:48:40.076263-05:00
Safe
2019-11-16 17:48:40.076296-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 17:48:40.077600-05:00
Safe
2019-11-16 17:48:40.077620-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 17:48:40.199667-05:00
Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 17:48:40.228214-05:00
Answer list length: 12
2019-11-16 17:48:40.228240-05:00
Candidate invariant: fix f1 (r1:rbtree) : bool =
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match delete r1 n1 with
                                          | Leaf N_fresh_var_1 -> (match c1 with
                                                                    | Red N_fresh_var_3 -> 
                                                                    False
                                                                    | Black N_fresh_var_3 -> 
                                                                    True)
                                          | Node N_fresh_var_1 -> (fun (c2:unit) ->
                                                                    (fun (r4:unit) ->
                                                                    (fun (n2:unit) ->
                                                                    (fun (r5:unit) ->
                                                                    match 
                                                                    min_val
                                                                    r3 with
                                                                    | O N_fresh_var_2 -> 
                                                                    and
                                                                    (nat_lt
                                                                    n2 n1)
                                                                    (f1 r2)
                                                                    | S N_fresh_var_2 -> 
                                                                    (fun (n3:unit) ->
                                                                    f1 r3)
                                                                    N_fresh_var_2)
                                                                    (#4
                                                                    N_fresh_var_1))
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (#2
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #1
                                                                    N_fresh_var_1))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 17:48:40.407840-05:00
Checking boundary for:Leaf
2019-11-16 17:48:40.409325-05:00
Safe
2019-11-16 17:48:40.409342-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 17:48:40.476551-05:00
Safe
2019-11-16 17:48:40.476564-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 17:48:40.477757-05:00
Safe
2019-11-16 17:48:40.477769-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 17:48:40.636537-05:00
Safe
2019-11-16 17:48:40.636579-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 17:48:40.722845-05:00
Safe
2019-11-16 17:48:40.722873-05:00
Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Red\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 17:48:40.798610-05:00
Answer list length: 13
2019-11-16 17:48:40.798642-05:00
Candidate invariant: fix f1 (r1:rbtree) : bool =
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match delete r1 n1 with
                                          | Leaf N_fresh_var_1 -> (match c1 with
                                                                    | Red N_fresh_var_3 -> 
                                                                    False
                                                                    | Black N_fresh_var_3 -> 
                                                                    True)
                                          | Node N_fresh_var_1 -> (fun (c2:unit) ->
                                                                    (fun (r4:unit) ->
                                                                    (fun (n2:unit) ->
                                                                    (fun (r5:unit) ->
                                                                    match r3 with
                                                                    | Leaf N_fresh_var_2 -> 
                                                                    and
                                                                    (nat_lt
                                                                    n2 n1)
                                                                    (f1 r2)
                                                                    | Node N_fresh_var_2 -> 
                                                                    (fun (c3:unit) ->
                                                                    (fun (r6:unit) ->
                                                                    (fun (n3:unit) ->
                                                                    (fun (r7:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1 n2)
                                                                    (f1 r3))
                                                                    (#4
                                                                    N_fresh_var_2))
                                                                    (#3
                                                                    N_fresh_var_2))
                                                                    (#2
                                                                    N_fresh_var_2))
                                                                    (#1
                                                                    N_fresh_var_2))
                                                                    (#4
                                                                    N_fresh_var_1))
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (#2
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #1
                                                                    N_fresh_var_1))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 17:48:41.041359-05:00
Checking boundary for:Leaf
2019-11-16 17:48:41.043283-05:00
Safe
2019-11-16 17:48:41.043304-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 17:48:41.044409-05:00
Safe
2019-11-16 17:48:41.044417-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 17:48:41.045216-05:00
Safe
2019-11-16 17:48:41.045223-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 17:48:41.231503-05:00
Safe
2019-11-16 17:48:41.231531-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 17:48:41.289423-05:00
Safe
2019-11-16 17:48:41.289451-05:00
verifying proves postcondition
2019-11-16 17:48:52.753512-05:00
postcondition proven
2019-11-16 17:48:52.753554-05:00
verifying: Leaf
2019-11-16 17:48:52.754289-05:00
Safe
2019-11-16 17:48:52.754299-05:00
verifying: fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 17:48:52.754865-05:00
Safe
2019-11-16 17:48:52.754872-05:00
verifying: fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 17:48:52.755503-05:00
Safe
2019-11-16 17:48:52.755509-05:00
verifying: fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 17:49:03.580001-05:00
Not a LR, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Node\",\n                   (Value.Tuple\n                      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                        (Value.Ctor (\"O\", (Value.Tuple [])));\n                        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                   ));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Node\",\n                   (Value.Tuple\n                      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                        (Value.Ctor (\"O\", (Value.Tuple [])));\n                        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                   ));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 17:49:03.700868-05:00
Answer list length: 14
2019-11-16 17:49:03.700902-05:00
Candidate invariant: fix f1 (r1:rbtree) : bool =
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match delete r1 (min_val r1) with
                                          | Leaf N_fresh_var_1 -> (match c1 with
                                                                    | Red N_fresh_var_3 -> 
                                                                    False
                                                                    | Black N_fresh_var_3 -> 
                                                                    True)
                                          | Node N_fresh_var_1 -> (fun (c2:unit) ->
                                                                    (fun (r4:unit) ->
                                                                    (fun (n2:unit) ->
                                                                    (fun (r5:unit) ->
                                                                    match n1 with
                                                                    | O N_fresh_var_2 -> 
                                                                    and
                                                                    (nat_lt
                                                                    n1 n2)
                                                                    (f1 r3)
                                                                    | S N_fresh_var_2 -> 
                                                                    (fun (n3:unit) ->
                                                                    and
                                                                    (lookup
                                                                    r1 n3)
                                                                    (f1 r2))
                                                                    N_fresh_var_2)
                                                                    (#4
                                                                    N_fresh_var_1))
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (#2
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #1
                                                                    N_fresh_var_1))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 17:49:03.850495-05:00
Checking boundary for:Leaf
2019-11-16 17:49:03.852054-05:00
Safe
2019-11-16 17:49:03.852075-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 17:49:03.853162-05:00
Safe
2019-11-16 17:49:03.853174-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 17:49:03.909633-05:00
Safe
2019-11-16 17:49:03.909649-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 17:49:03.944003-05:00
Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 17:49:04.016587-05:00
Answer list length: 13
2019-11-16 17:49:04.016619-05:00
Candidate invariant: fix f1 (r1:rbtree) : bool =
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match delete r1 n1 with
                                          | Leaf N_fresh_var_1 -> (match c1 with
                                                                    | Red N_fresh_var_3 -> 
                                                                    False
                                                                    | Black N_fresh_var_3 -> 
                                                                    True)
                                          | Node N_fresh_var_1 -> (fun (c2:unit) ->
                                                                    (fun (r4:unit) ->
                                                                    (fun (n2:unit) ->
                                                                    (fun (r5:unit) ->
                                                                    match r3 with
                                                                    | Leaf N_fresh_var_2 -> 
                                                                    and
                                                                    (nat_lt
                                                                    n2 n1)
                                                                    (f1 r2)
                                                                    | Node N_fresh_var_2 -> 
                                                                    (fun (c3:unit) ->
                                                                    (fun (r6:unit) ->
                                                                    (fun (n3:unit) ->
                                                                    (fun (r7:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1 n2)
                                                                    (f1 r3))
                                                                    (#4
                                                                    N_fresh_var_2))
                                                                    (#3
                                                                    N_fresh_var_2))
                                                                    (#2
                                                                    N_fresh_var_2))
                                                                    (#1
                                                                    N_fresh_var_2))
                                                                    (#4
                                                                    N_fresh_var_1))
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (#2
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #1
                                                                    N_fresh_var_1))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 17:49:04.250655-05:00
Checking boundary for:Leaf
2019-11-16 17:49:04.252202-05:00
Safe
2019-11-16 17:49:04.252223-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 17:49:04.253329-05:00
Safe
2019-11-16 17:49:04.317131-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 17:49:04.318633-05:00
Safe
2019-11-16 17:49:04.318653-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 17:49:04.587285-05:00
Safe
2019-11-16 17:49:04.587330-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 17:49:04.746036-05:00
Safe
2019-11-16 17:49:04.746060-05:00
Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Node\",\n                   (Value.Tuple\n                      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                        (Value.Ctor (\"O\", (Value.Tuple [])));\n                        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                   ));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 17:49:04.791453-05:00
testbed
2019-11-16 17:49:04.795915-05:00
{ TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Red", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Black", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("O", (Value.Tuple [])))));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Black", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Black", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 17:52:14.526084-05:00
Answer list length: 14
2019-11-16 17:52:14.529551-05:00
Candidate invariant: fix f1 (r1:rbtree) : bool =
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match min_max_vals r3 r2 with
                                          | JustLeft N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               and (nat_lt n1 n2) (f1 r3))
                                              N_fresh_var_1
                                          | JustRight N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               match f1 r2 with
                                                 | False N_fresh_var_3 -> 
                                                   False
                                                 | True N_fresh_var_3 -> 
                                                   nat_between n2 n1
                                                     (size r1))
                                              N_fresh_var_1
                                          | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    (fun (n3:unit) ->
                                                                    True)
                                                                    (#2
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #1
                                                                    N_fresh_var_1)
                                          | Neither N_fresh_var_1 -> (
                                            match c1 with
                                              | Red N_fresh_var_2 -> False
                                              | Black N_fresh_var_2 -> True))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 17:52:14.690386-05:00
Checking boundary for:Leaf
2019-11-16 17:52:14.695984-05:00
Safe
2019-11-16 17:52:14.696013-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 17:52:14.696863-05:00
Safe
2019-11-16 17:52:14.696870-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 17:52:14.769594-05:00
Safe
2019-11-16 17:52:14.769612-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 17:52:14.791884-05:00
Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 17:52:14.878865-05:00
Answer list length: 13
2019-11-16 17:52:14.878895-05:00
Candidate invariant: fix f1 (r1:rbtree) : bool =
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match delete r1 n1 with
                                          | Leaf N_fresh_var_1 -> (match c1 with
                                                                    | Red N_fresh_var_3 -> 
                                                                    False
                                                                    | Black N_fresh_var_3 -> 
                                                                    True)
                                          | Node N_fresh_var_1 -> (fun (c2:unit) ->
                                                                    (fun (r4:unit) ->
                                                                    (fun (n2:unit) ->
                                                                    (fun (r5:unit) ->
                                                                    match r3 with
                                                                    | Leaf N_fresh_var_2 -> 
                                                                    and
                                                                    (nat_lt
                                                                    n2 n1)
                                                                    (f1 r2)
                                                                    | Node N_fresh_var_2 -> 
                                                                    (fun (c3:unit) ->
                                                                    (fun (r6:unit) ->
                                                                    (fun (n3:unit) ->
                                                                    (fun (r7:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1 n2)
                                                                    (f1 r3))
                                                                    (#4
                                                                    N_fresh_var_2))
                                                                    (#3
                                                                    N_fresh_var_2))
                                                                    (#2
                                                                    N_fresh_var_2))
                                                                    (#1
                                                                    N_fresh_var_2))
                                                                    (#4
                                                                    N_fresh_var_1))
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (#2
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #1
                                                                    N_fresh_var_1))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 17:52:15.134928-05:00
Checking boundary for:Leaf
2019-11-16 17:52:15.136391-05:00
Safe
2019-11-16 17:52:15.136409-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 17:52:15.137649-05:00
Safe
2019-11-16 17:52:15.201117-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 17:52:15.202468-05:00
Safe
2019-11-16 17:52:15.202480-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 17:52:15.425223-05:00
Safe
2019-11-16 17:52:15.425263-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 17:52:15.568462-05:00
Safe
2019-11-16 17:52:15.568484-05:00
Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Node\",\n                   (Value.Tuple\n                      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                        (Value.Ctor (\"O\", (Value.Tuple [])));\n                        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                   ));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 17:52:20.578439-05:00
testbed
2019-11-16 17:52:20.578482-05:00
{ TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Red", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Black", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("O", (Value.Tuple [])))));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Black", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Black", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
           (Value.Ctor ("S",
              (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 17:56:10.054664-05:00
Answer list length: 14
2019-11-16 17:56:10.054711-05:00
Candidate invariant: fix f1 (r1:rbtree) : bool =
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match min_max_vals r3 r2 with
                                          | JustLeft N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               and (nat_lt n1 n2) (f1 r3))
                                              N_fresh_var_1
                                          | JustRight N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               match c1 with
                                                 | Red N_fresh_var_3 -> False
                                                 | Black N_fresh_var_3 -> 
                                                   and (nat_lt n2 n1) (
                                                     f1 r2))
                                              N_fresh_var_1
                                          | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    (fun (n3:unit) ->
                                                                    True)
                                                                    (#2
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #1
                                                                    N_fresh_var_1)
                                          | Neither N_fresh_var_1 -> (
                                            match c1 with
                                              | Red N_fresh_var_2 -> False
                                              | Black N_fresh_var_2 -> True))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 17:56:10.210478-05:00
Checking boundary for:Leaf
2019-11-16 17:56:10.213446-05:00
Safe
2019-11-16 17:56:10.213466-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 17:56:10.214359-05:00
Safe
2019-11-16 17:56:10.214375-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 17:56:10.217096-05:00
Safe
2019-11-16 17:56:10.296629-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 17:56:10.349191-05:00
Safe
2019-11-16 17:56:10.349213-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 17:56:10.487889-05:00
Safe
2019-11-16 17:56:10.487913-05:00
verifying proves postcondition
2019-11-16 17:56:46.169222-05:00
postcondition proven
2019-11-16 17:56:46.169377-05:00
verifying: Leaf
2019-11-16 17:56:46.180553-05:00
Safe
2019-11-16 17:56:46.180580-05:00
verifying: fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 17:56:46.185354-05:00
Safe
2019-11-16 17:56:46.185380-05:00
verifying: fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 17:56:46.187983-05:00
Safe
2019-11-16 17:56:46.187995-05:00
verifying: fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 17:56:57.413830-05:00
Safe
2019-11-16 17:56:57.413869-05:00
verifying: fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 17:56:59.502271-05:00
Not a LR, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 17:57:43.949566-05:00
testbed
2019-11-16 17:57:43.949611-05:00
{ TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Red", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Black", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("O", (Value.Tuple [])))));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Black", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Black", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
           (Value.Ctor ("S",
              (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 18:01:48.957198-05:00
Answer list length: 15
2019-11-16 18:01:48.957292-05:00
Candidate invariant: fix f1 (r1:rbtree) : bool =
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match min_max_vals r3 r2 with
                                          | JustLeft N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               and (nat_lt n1 n2) (f1 r3))
                                              N_fresh_var_1
                                          | JustRight N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               match c1 with
                                                 | Red N_fresh_var_3 -> False
                                                 | Black N_fresh_var_3 -> 
                                                   and (nat_lt n2 n1) (
                                                     f1 r2))
                                              N_fresh_var_1
                                          | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    (fun (n3:unit) ->
                                                                    f1 r2)
                                                                    (#2
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #1
                                                                    N_fresh_var_1)
                                          | Neither N_fresh_var_1 -> (
                                            match c1 with
                                              | Red N_fresh_var_2 -> False
                                              | Black N_fresh_var_2 -> True))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 18:01:49.086502-05:00
Checking boundary for:Leaf
2019-11-16 18:01:49.088997-05:00
Safe
2019-11-16 18:01:49.089009-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 18:01:49.091514-05:00
Safe
2019-11-16 18:01:49.091527-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 18:01:49.094567-05:00
Safe
2019-11-16 18:01:49.150080-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 18:01:49.256097-05:00
Safe
2019-11-16 18:01:49.256120-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 18:01:49.327356-05:00
Safe
2019-11-16 18:01:49.327375-05:00
verifying proves postcondition
2019-11-16 18:02:20.089948-05:00
postcondition proven
2019-11-16 18:02:20.089981-05:00
verifying: Leaf
2019-11-16 18:02:20.093528-05:00
Safe
2019-11-16 18:02:20.093552-05:00
verifying: fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 18:02:20.095841-05:00
Safe
2019-11-16 18:02:20.095847-05:00
verifying: fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 18:02:20.097885-05:00
Safe
2019-11-16 18:02:20.097892-05:00
verifying: fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 18:02:36.315440-05:00
Safe
2019-11-16 18:02:36.315467-05:00
verifying: fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 18:03:08.919853-05:00
Not a LR, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 18:03:39.593089-05:00
testbed
2019-11-16 18:03:39.593115-05:00
{ TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Red", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Black", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("O", (Value.Tuple [])))));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Black", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Black", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
           (Value.Ctor ("S",
              (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 18:13:25.426745-05:00
Answer list length: 16
2019-11-16 18:13:25.430828-05:00
Candidate invariant: fix f1 (r1:rbtree) : bool =
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match min_max_vals r3 r2 with
                                          | JustLeft N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               and (nat_lt n1 n2) (f1 r3))
                                              N_fresh_var_1
                                          | JustRight N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               match c1 with
                                                 | Red N_fresh_var_3 -> False
                                                 | Black N_fresh_var_3 -> 
                                                   and (nat_lt n2 n1) (
                                                     f1 r2))
                                              N_fresh_var_1
                                          | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    (fun (n3:unit) ->
                                                                    f1 r3)
                                                                    (#2
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #1
                                                                    N_fresh_var_1)
                                          | Neither N_fresh_var_1 -> (
                                            match c1 with
                                              | Red N_fresh_var_2 -> False
                                              | Black N_fresh_var_2 -> True))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 18:13:48.317990-05:00
Checking boundary for:Leaf
2019-11-16 18:13:48.325766-05:00
Safe
2019-11-16 18:13:48.325787-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 18:13:48.329783-05:00
Safe
2019-11-16 18:13:48.329794-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 18:14:08.822838-05:00
Safe
2019-11-16 18:14:08.822851-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 18:14:08.945257-05:00
Safe
2019-11-16 18:14:08.945282-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 18:14:50.039943-05:00
Safe
2019-11-16 18:14:50.039968-05:00
verifying proves postcondition
2019-11-16 18:15:15.941115-05:00
postcondition proven
2019-11-16 18:15:15.941147-05:00
verifying: Leaf
2019-11-16 18:15:15.958328-05:00
Safe
2019-11-16 18:15:15.958341-05:00
verifying: fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 18:15:15.962322-05:00
Safe
2019-11-16 18:15:15.962331-05:00
verifying: fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 18:15:16.969184-05:00
Safe
2019-11-16 18:15:16.969197-05:00
verifying: fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 18:15:44.432795-05:00
Safe
2019-11-16 18:15:44.432823-05:00
verifying: fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 18:16:02.248295-05:00
Not a LR, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 18:17:27.389114-05:00
testbed
2019-11-16 18:17:27.389218-05:00
{ TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Red", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Black", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("O", (Value.Tuple [])))));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Black", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Black", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
           (Value.Ctor ("S",
              (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 18:27:04.959756-05:00
Answer list length: 17
2019-11-16 18:27:04.967370-05:00
Candidate invariant: fix f1 (r1:rbtree) : bool =
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match min_max_vals r3 r2 with
                                          | JustLeft N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               and (nat_lt n1 n2) (f1 r3))
                                              N_fresh_var_1
                                          | JustRight N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               match c1 with
                                                 | Red N_fresh_var_3 -> False
                                                 | Black N_fresh_var_3 -> 
                                                   and (nat_lt n2 n1) (
                                                     f1 r2))
                                              N_fresh_var_1
                                          | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    (fun (n3:unit) ->
                                                                    nat_lt n1
                                                                    n2)
                                                                    (#2
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #1
                                                                    N_fresh_var_1)
                                          | Neither N_fresh_var_1 -> (
                                            match c1 with
                                              | Red N_fresh_var_2 -> False
                                              | Black N_fresh_var_2 -> True))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 18:27:50.515279-05:00
Checking boundary for:Leaf
2019-11-16 18:27:50.522587-05:00
Safe
2019-11-16 18:27:50.522597-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 18:27:50.526731-05:00
Safe
2019-11-16 18:27:50.526759-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 18:28:11.164451-05:00
Safe
2019-11-16 18:28:11.164473-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 18:28:11.219584-05:00
Safe
2019-11-16 18:28:11.219603-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 18:28:59.268487-05:00
Safe
2019-11-16 18:28:59.268511-05:00
verifying proves postcondition
2019-11-16 18:29:47.620716-05:00
postcondition proven
2019-11-16 18:29:47.620865-05:00
verifying: Leaf
2019-11-16 18:29:47.629968-05:00
Safe
2019-11-16 18:29:47.629976-05:00
verifying: fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 18:29:47.633787-05:00
Safe
2019-11-16 18:29:47.633794-05:00
verifying: fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 18:29:47.636869-05:00
Safe
2019-11-16 18:29:47.636894-05:00
verifying: fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 18:29:57.888337-05:00
Safe
2019-11-16 18:29:57.888362-05:00
verifying: fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 18:30:31.293632-05:00
Not a LR, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 18:30:53.756168-05:00
Answer list length: 18
2019-11-16 18:30:53.758509-05:00
Candidate invariant: fix f1 (r1:rbtree) : bool =
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match min_max_vals r2 r3 with
                                          | JustLeft N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               match c1 with
                                                 | Red N_fresh_var_3 -> False
                                                 | Black N_fresh_var_3 -> 
                                                   and (nat_lt n2 n1) (
                                                     f1 r2))
                                              N_fresh_var_1
                                          | JustRight N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               and (nat_lt n1 n2) (f1 r3))
                                              N_fresh_var_1
                                          | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    (fun (n3:unit) ->
                                                                    nat_lt n2
                                                                    n1)
                                                                    (#2
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #1
                                                                    N_fresh_var_1)
                                          | Neither N_fresh_var_1 -> (
                                            match c1 with
                                              | Red N_fresh_var_2 -> False
                                              | Black N_fresh_var_2 -> True))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 18:31:29.837793-05:00
Checking boundary for:Leaf
2019-11-16 18:31:50.012952-05:00
Safe
2019-11-16 18:31:50.012970-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 18:31:50.015139-05:00
Safe
2019-11-16 18:31:50.015154-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 18:31:50.016271-05:00
Safe
2019-11-16 18:31:50.016279-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 18:32:10.227839-05:00
Safe
2019-11-16 18:32:10.227873-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 18:32:50.621662-05:00
Safe
2019-11-16 18:32:50.621685-05:00
verifying proves postcondition
2019-11-16 18:33:55.261639-05:00
postcondition proven
2019-11-16 18:33:55.261744-05:00
verifying: Leaf
2019-11-16 18:33:55.263843-05:00
Safe
2019-11-16 18:33:55.263852-05:00
verifying: fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 18:33:55.264738-05:00
Safe
2019-11-16 18:33:55.264745-05:00
verifying: fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 18:33:55.267072-05:00
Safe
2019-11-16 18:33:55.267080-05:00
verifying: fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 18:34:11.482204-05:00
Safe
2019-11-16 18:34:11.482229-05:00
verifying: fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 18:34:40.724630-05:00
Not a LR, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Node\",\n                   (Value.Tuple\n                      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                        (Value.Ctor (\"O\", (Value.Tuple [])));\n                        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                   ));\n                (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 18:34:58.010654-05:00
testbed
2019-11-16 18:34:58.010691-05:00
{ TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Red", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Black", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("O", (Value.Tuple [])))));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Black", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Black", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
           (Value.Ctor ("S",
              (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 18:46:23.983184-05:00
Answer list length: 19
2019-11-16 18:46:23.987224-05:00
Candidate invariant: fix f1 (r1:rbtree) : bool =
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match min_max_vals r3 r2 with
                                          | JustLeft N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               and (nat_lt n1 n2) (f1 r3))
                                              N_fresh_var_1
                                          | JustRight N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               match c1 with
                                                 | Red N_fresh_var_3 -> False
                                                 | Black N_fresh_var_3 -> 
                                                   and (nat_lt n2 n1) (
                                                     f1 r2))
                                              N_fresh_var_1
                                          | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    (fun (n3:unit) ->
                                                                    nat_lt n3
                                                                    n1)
                                                                    (#2
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #1
                                                                    N_fresh_var_1)
                                          | Neither N_fresh_var_1 -> (
                                            match c1 with
                                              | Red N_fresh_var_2 -> False
                                              | Black N_fresh_var_2 -> True))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 18:46:52.211439-05:00
Checking boundary for:Leaf
2019-11-16 18:46:52.222086-05:00
Safe
2019-11-16 18:46:52.222101-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 18:46:52.228187-05:00
Safe
2019-11-16 18:46:52.228194-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 18:47:15.699256-05:00
Safe
2019-11-16 18:47:15.699274-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 18:47:15.895315-05:00
Safe
2019-11-16 18:47:15.895338-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 18:47:57.460932-05:00
Safe
2019-11-16 18:47:57.460955-05:00
verifying proves postcondition
2019-11-16 18:48:18.417704-05:00
postcondition proven
2019-11-16 18:48:18.417730-05:00
verifying: Leaf
2019-11-16 18:48:18.418369-05:00
Safe
2019-11-16 18:48:18.418376-05:00
verifying: fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 18:48:18.421788-05:00
Safe
2019-11-16 18:48:18.421800-05:00
verifying: fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 18:48:18.422967-05:00
Safe
2019-11-16 18:48:18.422978-05:00
verifying: fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 18:49:32.782535-05:00
Safe
2019-11-16 18:49:32.782725-05:00
verifying: fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 18:49:38.771447-05:00
Not a LR, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 18:51:21.683177-05:00
testbed
2019-11-16 18:51:21.683779-05:00
{ TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Red", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Black", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("O", (Value.Tuple [])))));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Black", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Black", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
           (Value.Ctor ("S",
              (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 19:01:34.891300-05:00
Answer list length: 20
2019-11-16 19:01:34.891589-05:00
Candidate invariant: fix f1 (r1:rbtree) : bool =
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match min_max_vals r3 r2 with
                                          | JustLeft N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               and (nat_lt n1 n2) (f1 r3))
                                              N_fresh_var_1
                                          | JustRight N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               match c1 with
                                                 | Red N_fresh_var_3 -> False
                                                 | Black N_fresh_var_3 -> 
                                                   and (nat_lt n2 n1) (
                                                     f1 r2))
                                              N_fresh_var_1
                                          | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    (fun (n3:unit) ->
                                                                    nat_lt
                                                                    (size r2)
                                                                    n2)
                                                                    (#2
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #1
                                                                    N_fresh_var_1)
                                          | Neither N_fresh_var_1 -> (
                                            match c1 with
                                              | Red N_fresh_var_2 -> False
                                              | Black N_fresh_var_2 -> True))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 19:01:58.292706-05:00
Checking boundary for:Leaf
2019-11-16 19:01:58.308688-05:00
Safe
2019-11-16 19:01:58.308717-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 19:01:58.316589-05:00
Safe
2019-11-16 19:01:58.316599-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 19:02:20.592736-05:00
Safe
2019-11-16 19:02:20.592753-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 19:02:20.834847-05:00
Safe
2019-11-16 19:02:20.834871-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 19:03:01.723131-05:00
Safe
2019-11-16 19:03:01.723156-05:00
verifying proves postcondition
2019-11-16 19:04:08.547175-05:00
postcondition proven
2019-11-16 19:04:08.547380-05:00
verifying: Leaf
2019-11-16 19:04:08.550178-05:00
Safe
2019-11-16 19:04:08.550201-05:00
verifying: fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 19:04:08.552609-05:00
Safe
2019-11-16 19:04:08.552633-05:00
verifying: fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 19:04:08.554033-05:00
Safe
2019-11-16 19:04:08.554041-05:00
verifying: fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 19:04:21.964361-05:00
Not a LR, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Node\",\n                   (Value.Tuple\n                      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                        (Value.Ctor (\"S\",\n                           (Value.Ctor (\"O\", (Value.Tuple [])))));\n                        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                   ));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 19:05:12.787719-05:00
testbed
2019-11-16 19:05:12.787747-05:00
{ TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Red", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Black", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("O", (Value.Tuple [])))));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Black", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Black", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
           (Value.Ctor ("S",
              (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 19:19:36.329648-05:00
Answer list length: 21
2019-11-16 19:19:36.332657-05:00
Candidate invariant: fix f1 (r1:rbtree) : bool =
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match min_max_vals r3 r2 with
                                          | JustLeft N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               and (nat_lt n1 n2) (f1 r3))
                                              N_fresh_var_1
                                          | JustRight N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               match c1 with
                                                 | Red N_fresh_var_3 -> False
                                                 | Black N_fresh_var_3 -> 
                                                   and (nat_lt n2 n1) (
                                                     f1 r2))
                                              N_fresh_var_1
                                          | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    (fun (n3:unit) ->
                                                                    nat_between
                                                                    n3 n1 n2)
                                                                    (#2
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #1
                                                                    N_fresh_var_1)
                                          | Neither N_fresh_var_1 -> (
                                            match c1 with
                                              | Red N_fresh_var_2 -> False
                                              | Black N_fresh_var_2 -> True))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 19:19:43.166738-05:00
Checking boundary for:Leaf
2019-11-16 19:19:43.170042-05:00
Safe
2019-11-16 19:19:43.170053-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 19:19:43.172258-05:00
Safe
2019-11-16 19:19:43.172267-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 19:19:45.808080-05:00
Safe
2019-11-16 19:19:45.808091-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 19:19:45.937439-05:00
Safe
2019-11-16 19:19:45.937461-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 19:20:29.994239-05:00
Safe
2019-11-16 19:20:29.994263-05:00
verifying proves postcondition
2019-11-16 19:20:50.390174-05:00
postcondition proven
2019-11-16 19:20:50.390199-05:00
verifying: Leaf
2019-11-16 19:20:50.394670-05:00
Safe
2019-11-16 19:20:50.394695-05:00
verifying: fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 19:20:50.398374-05:00
Safe
2019-11-16 19:20:50.398399-05:00
verifying: fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 19:20:50.915430-05:00
Safe
2019-11-16 19:20:50.915468-05:00
verifying: fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 19:21:01.957996-05:00
Safe
2019-11-16 19:21:01.958020-05:00
verifying: fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 19:21:24.124506-05:00
Not a LR, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 19:22:05.006213-05:00
testbed
2019-11-16 19:22:05.006240-05:00
{ TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Red", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Black", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("O", (Value.Tuple [])))));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Black", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Black", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
           (Value.Ctor ("S",
              (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 19:38:40.505925-05:00
Answer list length: 22
2019-11-16 19:38:40.507178-05:00
Candidate invariant: fix f1 (r1:rbtree) : bool =
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match min_max_vals r3 r2 with
                                          | JustLeft N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               and (nat_lt n1 n2) (f1 r3))
                                              N_fresh_var_1
                                          | JustRight N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               match c1 with
                                                 | Red N_fresh_var_3 -> False
                                                 | Black N_fresh_var_3 -> 
                                                   and (nat_lt n2 n1) (
                                                     f1 r2))
                                              N_fresh_var_1
                                          | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    (fun (n3:unit) ->
                                                                    and
                                                                    (f1 r3)
                                                                    (f1 r2))
                                                                    (#2
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #1
                                                                    N_fresh_var_1)
                                          | Neither N_fresh_var_1 -> (
                                            match c1 with
                                              | Red N_fresh_var_2 -> False
                                              | Black N_fresh_var_2 -> True))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 19:40:13.347958-05:00
Checking boundary for:Leaf
2019-11-16 19:40:13.355757-05:00
Safe
2019-11-16 19:40:13.355774-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 19:40:13.360778-05:00
Safe
2019-11-16 19:40:13.360792-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 19:40:33.517113-05:00
Safe
2019-11-16 19:40:33.517130-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 19:40:33.679802-05:00
Safe
2019-11-16 19:40:33.679827-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 19:40:58.730397-05:00
Safe
2019-11-16 19:40:58.730421-05:00
verifying proves postcondition
2019-11-16 19:41:19.175296-05:00
postcondition proven
2019-11-16 19:41:19.175325-05:00
verifying: Leaf
2019-11-16 19:41:19.176394-05:00
Safe
2019-11-16 19:41:19.176401-05:00
verifying: fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 19:41:19.177101-05:00
Safe
2019-11-16 19:41:19.177107-05:00
verifying: fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 19:41:19.177703-05:00
Safe
2019-11-16 19:41:19.177708-05:00
verifying: fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 19:41:51.169343-05:00
Safe
2019-11-16 19:41:51.169367-05:00
verifying: fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 19:42:21.288585-05:00
Not a LR, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 19:42:48.736140-05:00
testbed
2019-11-16 19:42:48.736165-05:00
{ TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Red", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Black", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("O", (Value.Tuple [])))));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Black", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Black", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
           (Value.Ctor ("S",
              (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 19:55:16.104620-05:00
Answer list length: 23
2019-11-16 19:55:16.106051-05:00
Candidate invariant: fix f1 (r1:rbtree) : bool =
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match min_max_vals r3 r2 with
                                          | JustLeft N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               and (nat_lt n1 n2) (f1 r3))
                                              N_fresh_var_1
                                          | JustRight N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               match c1 with
                                                 | Red N_fresh_var_3 -> False
                                                 | Black N_fresh_var_3 -> 
                                                   and (nat_lt n2 n1) (
                                                     f1 r2))
                                              N_fresh_var_1
                                          | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    (fun (n3:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1 n2)
                                                                    (f1 r2))
                                                                    (#2
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #1
                                                                    N_fresh_var_1)
                                          | Neither N_fresh_var_1 -> (
                                            match c1 with
                                              | Red N_fresh_var_2 -> False
                                              | Black N_fresh_var_2 -> True))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 19:55:58.932884-05:00
Checking boundary for:Leaf
2019-11-16 19:55:58.971864-05:00
Safe
2019-11-16 19:55:58.971896-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 19:55:58.993154-05:00
Safe
2019-11-16 19:55:58.993182-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 19:56:19.873436-05:00
Safe
2019-11-16 19:56:19.873458-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 19:56:20.618139-05:00
Safe
2019-11-16 19:56:40.284228-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 19:57:01.095646-05:00
Safe
2019-11-16 19:57:01.095674-05:00
verifying proves postcondition
2019-11-16 19:57:54.095647-05:00
postcondition proven
2019-11-16 19:57:54.097659-05:00
verifying: Leaf
2019-11-16 19:57:54.103710-05:00
Safe
2019-11-16 19:57:54.103722-05:00
verifying: fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 19:57:54.105678-05:00
Safe
2019-11-16 19:57:54.105685-05:00
verifying: fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 19:57:54.107550-05:00
Safe
2019-11-16 19:57:54.107557-05:00
verifying: fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 19:58:14.778269-05:00
Safe
2019-11-16 19:58:14.778553-05:00
verifying: fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 19:59:12.790672-05:00
Not a LR, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 19:59:57.304354-05:00
Answer list length: 24
2019-11-16 19:59:57.305190-05:00
Candidate invariant: fix f1 (r1:rbtree) : bool =
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match min_max_vals r2 r3 with
                                          | JustLeft N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               match c1 with
                                                 | Red N_fresh_var_3 -> False
                                                 | Black N_fresh_var_3 -> 
                                                   and (nat_lt n2 n1) (
                                                     f1 r2))
                                              N_fresh_var_1
                                          | JustRight N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               and (nat_lt n1 (min_val r3))
                                                 (f1 r3))
                                              N_fresh_var_1
                                          | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    (fun (n3:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n2 n1)
                                                                    (f1 r2))
                                                                    (#2
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #1
                                                                    N_fresh_var_1)
                                          | Neither N_fresh_var_1 -> (
                                            match c1 with
                                              | Red N_fresh_var_2 -> False
                                              | Black N_fresh_var_2 -> True))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 20:00:28.763622-05:00
Checking boundary for:Leaf
2019-11-16 20:00:28.772020-05:00
Safe
2019-11-16 20:00:28.772055-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 20:00:28.780753-05:00
Safe
2019-11-16 20:00:28.780764-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 20:00:49.375396-05:00
Safe
2019-11-16 20:00:49.375415-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 20:01:10.774013-05:00
Safe
2019-11-16 20:01:10.774040-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 20:01:32.254334-05:00
Safe
2019-11-16 20:01:32.254361-05:00
verifying proves postcondition
2019-11-16 20:02:21.826017-05:00
postcondition proven
2019-11-16 20:02:21.826232-05:00
verifying: Leaf
2019-11-16 20:02:21.830359-05:00
Safe
2019-11-16 20:02:21.830366-05:00
verifying: fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 20:02:21.831698-05:00
Safe
2019-11-16 20:02:21.831703-05:00
verifying: fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 20:02:21.833795-05:00
Safe
2019-11-16 20:02:21.833802-05:00
verifying: fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 20:02:46.233649-05:00
Safe
2019-11-16 20:02:46.233857-05:00
verifying: fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 20:03:15.755832-05:00
Not a LR, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 20:03:31.423685-05:00
testbed
2019-11-16 20:03:31.423707-05:00
{ TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Red", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Black", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("O", (Value.Tuple [])))));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Black", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Black", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
           (Value.Ctor ("S",
              (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 20:21:04.526266-05:00
Answer list length: 25
2019-11-16 20:21:04.532395-05:00
Candidate invariant: fix f1 (r1:rbtree) : bool =
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match min_max_vals r3 r2 with
                                          | JustLeft N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               and (nat_lt n1 n2) (f1 r3))
                                              N_fresh_var_1
                                          | JustRight N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               match c1 with
                                                 | Red N_fresh_var_3 -> False
                                                 | Black N_fresh_var_3 -> 
                                                   and (nat_lt n2 n1) (
                                                     f1 r2))
                                              N_fresh_var_1
                                          | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    (fun (n3:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1 n2)
                                                                    (f1 r3))
                                                                    (#2
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #1
                                                                    N_fresh_var_1)
                                          | Neither N_fresh_var_1 -> (
                                            match c1 with
                                              | Red N_fresh_var_2 -> False
                                              | Black N_fresh_var_2 -> True))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 20:22:03.376286-05:00
Checking boundary for:Leaf
2019-11-16 20:22:03.394191-05:00
Safe
2019-11-16 20:22:03.394225-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 20:22:03.416483-05:00
Safe
2019-11-16 20:22:03.416519-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 20:22:23.878171-05:00
Safe
2019-11-16 20:22:23.878186-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 20:22:24.051377-05:00
Safe
2019-11-16 20:22:44.226682-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 20:23:04.513650-05:00
Safe
2019-11-16 20:23:04.513675-05:00
verifying proves postcondition
2019-11-16 20:23:26.020611-05:00
postcondition proven
2019-11-16 20:23:26.020635-05:00
verifying: Leaf
2019-11-16 20:23:26.024357-05:00
Safe
2019-11-16 20:23:26.024365-05:00
verifying: fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 20:23:26.028980-05:00
Safe
2019-11-16 20:23:26.029002-05:00
verifying: fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 20:23:26.030174-05:00
Safe
2019-11-16 20:23:26.030180-05:00
verifying: fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 20:23:56.377397-05:00
Safe
2019-11-16 20:23:56.377421-05:00
verifying: fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 20:24:29.059128-05:00
Not a LR, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 20:24:55.324122-05:00
Answer list length: 26
2019-11-16 20:24:55.324160-05:00
Candidate invariant: fix f1 (r1:rbtree) : bool =
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match min_max_vals r2 r3 with
                                          | JustLeft N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               match c1 with
                                                 | Red N_fresh_var_3 -> False
                                                 | Black N_fresh_var_3 -> 
                                                   and (nat_lt n2 n1) (
                                                     f1 r2))
                                              N_fresh_var_1
                                          | JustRight N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               and (nat_lt n1 (min_val r3))
                                                 (f1 r3))
                                              N_fresh_var_1
                                          | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    (fun (n3:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n2 n1)
                                                                    (f1 r3))
                                                                    (#2
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #1
                                                                    N_fresh_var_1)
                                          | Neither N_fresh_var_1 -> (
                                            match c1 with
                                              | Red N_fresh_var_2 -> False
                                              | Black N_fresh_var_2 -> True))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 20:25:45.790277-05:00
Checking boundary for:Leaf
2019-11-16 20:25:45.805979-05:00
Safe
2019-11-16 20:25:45.806006-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 20:25:45.810882-05:00
Safe
2019-11-16 20:25:45.810890-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 20:25:45.814267-05:00
Safe
2019-11-16 20:25:45.814300-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 20:26:06.137053-05:00
Safe
2019-11-16 20:26:06.137077-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 20:26:46.421574-05:00
Safe
2019-11-16 20:26:46.421600-05:00
verifying proves postcondition
2019-11-16 20:27:38.756960-05:00
postcondition proven
2019-11-16 20:27:38.757341-05:00
verifying: Leaf
2019-11-16 20:27:38.768336-05:00
Safe
2019-11-16 20:27:38.768367-05:00
verifying: fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 20:27:38.773332-05:00
Safe
2019-11-16 20:27:38.773340-05:00
verifying: fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 20:27:38.778628-05:00
Safe
2019-11-16 20:27:38.778637-05:00
verifying: fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 20:28:22.972192-05:00
Safe
2019-11-16 20:28:22.972221-05:00
verifying: fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 20:28:29.438530-05:00
Not a LR, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 20:29:04.525195-05:00
testbed
2019-11-16 20:29:04.525223-05:00
{ TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Red", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Black", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("O", (Value.Tuple [])))));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Black", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Black", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
           (Value.Ctor ("S",
              (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 21:01:38.548467-05:00
Answer list length: 27
2019-11-16 21:01:38.568988-05:00
Candidate invariant: fix f1 (r1:rbtree) : bool =
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match min_max_vals r3 r2 with
                                          | JustLeft N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               and (nat_lt n1 n2) (f1 r3))
                                              N_fresh_var_1
                                          | JustRight N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               match c1 with
                                                 | Red N_fresh_var_4 -> False
                                                 | Black N_fresh_var_4 -> 
                                                   and (nat_lt n2 n1) (
                                                     f1 r2))
                                              N_fresh_var_1
                                          | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    (fun (n3:unit) ->
                                                                    match 
                                                                    f1 r2 with
                                                                    | False N_fresh_var_3 -> 
                                                                    False
                                                                    | True N_fresh_var_3 -> 
                                                                    nat_lt
                                                                    (size r2)
                                                                    n2)
                                                                    (#2
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #1
                                                                    N_fresh_var_1)
                                          | Neither N_fresh_var_1 -> (
                                            match c1 with
                                              | Red N_fresh_var_2 -> False
                                              | Black N_fresh_var_2 -> True))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 21:03:36.771952-05:00
Checking boundary for:Leaf
2019-11-16 21:03:36.815809-05:00
Safe
2019-11-16 21:03:36.815837-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 21:03:56.929141-05:00
Safe
2019-11-16 21:03:56.929150-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 21:03:56.937825-05:00
Safe
2019-11-16 21:03:56.937851-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 21:04:05.048087-05:00
Safe
2019-11-16 21:04:05.048114-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 21:04:25.042647-05:00
Safe
2019-11-16 21:04:25.042676-05:00
verifying proves postcondition
2019-11-16 21:05:48.705540-05:00
postcondition proven
2019-11-16 21:05:48.705739-05:00
verifying: Leaf
2019-11-16 21:05:48.729058-05:00
Safe
2019-11-16 21:05:48.729067-05:00
verifying: fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 21:05:48.738621-05:00
Safe
2019-11-16 21:05:48.738634-05:00
verifying: fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 21:05:48.743490-05:00
Safe
2019-11-16 21:05:48.743507-05:00
verifying: fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 21:06:06.734589-05:00
Not a LR, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Node\",\n                   (Value.Tuple\n                      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                        (Value.Ctor (\"S\",\n                           (Value.Ctor (\"O\", (Value.Tuple [])))));\n                        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                   ));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 21:14:01.126566-05:00
Answer list length: 28
2019-11-16 21:14:01.132444-05:00
Candidate invariant: fix f1 (r1:rbtree) : bool =
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match min_max_vals r2 r3 with
                                          | JustLeft N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               match c1 with
                                                 | Red N_fresh_var_4 -> False
                                                 | Black N_fresh_var_4 -> 
                                                   and (nat_lt n2 n1) (
                                                     f1 r2))
                                              N_fresh_var_1
                                          | JustRight N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               and (nat_lt n1 (min_val r3))
                                                 (f1 r3))
                                              N_fresh_var_1
                                          | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    (fun (n3:unit) ->
                                                                    match 
                                                                    f1 r3 with
                                                                    | False N_fresh_var_3 -> 
                                                                    False
                                                                    | True N_fresh_var_3 -> 
                                                                    nat_lt
                                                                    (size r2)
                                                                    n3)
                                                                    (#2
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #1
                                                                    N_fresh_var_1)
                                          | Neither N_fresh_var_1 -> (
                                            match c1 with
                                              | Red N_fresh_var_2 -> False
                                              | Black N_fresh_var_2 -> True))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 21:14:18.182862-05:00
Checking boundary for:Leaf
2019-11-16 21:14:33.576890-05:00
Safe
2019-11-16 21:14:33.576918-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 21:14:33.580638-05:00
Safe
2019-11-16 21:14:33.580648-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 21:14:33.606357-05:00
Safe
2019-11-16 21:14:33.606365-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 21:14:49.804595-05:00
Safe
2019-11-16 21:14:49.804624-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 21:14:56.800388-05:00
Safe
2019-11-16 21:15:08.568193-05:00
verifying proves postcondition
2019-11-16 21:18:23.645427-05:00
postcondition proven
2019-11-16 21:18:23.648686-05:00
verifying: Leaf
2019-11-16 21:18:23.682048-05:00
Safe
2019-11-16 21:18:23.682076-05:00
verifying: fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 21:18:23.690199-05:00
Safe
2019-11-16 21:18:23.690207-05:00
verifying: fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 21:18:23.695967-05:00
Safe
2019-11-16 21:18:23.695996-05:00
verifying: fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 21:18:41.208020-05:00
Not a LR, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Node\",\n                   (Value.Tuple\n                      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                        (Value.Ctor (\"O\", (Value.Tuple [])));\n                        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                   ));\n                (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Node\",\n                   (Value.Tuple\n                      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                        (Value.Ctor (\"O\", (Value.Tuple [])));\n                        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                   ));\n                (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 21:18:42.672101-05:00
Answer list length: 29
2019-11-16 21:18:42.673542-05:00
Candidate invariant: fix f1 (r1:rbtree) : bool =
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match min_max_vals r3 r2 with
                                          | JustLeft N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               and (nat_lt n1 n2) (f1 r3))
                                              N_fresh_var_1
                                          | JustRight N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               match c1 with
                                                 | Red N_fresh_var_4 -> False
                                                 | Black N_fresh_var_4 -> 
                                                   and (nat_lt n2 n1) (
                                                     f1 r2))
                                              N_fresh_var_1
                                          | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    (fun (n3:unit) ->
                                                                    match 
                                                                    f1 r3 with
                                                                    | False N_fresh_var_3 -> 
                                                                    False
                                                                    | True N_fresh_var_3 -> 
                                                                    nat_lt
                                                                    (size r2)
                                                                    n2)
                                                                    (#2
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #1
                                                                    N_fresh_var_1)
                                          | Neither N_fresh_var_1 -> (
                                            match c1 with
                                              | Red N_fresh_var_2 -> False
                                              | Black N_fresh_var_2 -> True))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 21:18:42.871854-05:00
Checking boundary for:Leaf
2019-11-16 21:18:42.880246-05:00
Safe
2019-11-16 21:18:42.880261-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 21:18:42.973493-05:00
Safe
2019-11-16 21:18:42.973510-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 21:18:42.983762-05:00
Safe
2019-11-16 21:18:42.983786-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 21:18:43.417378-05:00
Safe
2019-11-16 21:18:43.417407-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 21:18:43.940007-05:00
Safe
2019-11-16 21:18:43.940056-05:00
verifying proves postcondition
2019-11-16 21:19:30.114611-05:00
postcondition proven
2019-11-16 21:19:30.114818-05:00
verifying: Leaf
2019-11-16 21:19:30.136945-05:00
Safe
2019-11-16 21:19:30.136966-05:00
verifying: fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 21:19:30.146924-05:00
Safe
2019-11-16 21:19:30.146935-05:00
verifying: fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 21:19:30.149473-05:00
Safe
2019-11-16 21:19:30.149479-05:00
verifying: fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 21:19:45.793144-05:00
Not a LR, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Node\",\n                   (Value.Tuple\n                      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                        (Value.Ctor (\"S\",\n                           (Value.Ctor (\"O\", (Value.Tuple [])))));\n                        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                   ));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 21:19:58.162482-05:00
testbed
2019-11-16 21:19:58.162510-05:00
{ TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Red", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Black", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("O", (Value.Tuple [])))));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Black", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Black", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
           (Value.Ctor ("S",
              (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 21:42:11.406902-05:00
Answer list length: 30
2019-11-16 21:42:11.410722-05:00
Candidate invariant: fix f1 (r1:rbtree) : bool =
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match min_max_vals r3 r2 with
                                          | JustLeft N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               and (nat_lt n1 n2) (f1 r3))
                                              N_fresh_var_1
                                          | JustRight N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               match c1 with
                                                 | Red N_fresh_var_4 -> False
                                                 | Black N_fresh_var_4 -> 
                                                   and (nat_lt n2 n1) (
                                                     f1 r2))
                                              N_fresh_var_1
                                          | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    (fun (n3:unit) ->
                                                                    match 
                                                                    f1 r2 with
                                                                    | False N_fresh_var_3 -> 
                                                                    False
                                                                    | True N_fresh_var_3 -> 
                                                                    nat_between
                                                                    n3 n1 n2)
                                                                    (#2
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #1
                                                                    N_fresh_var_1)
                                          | Neither N_fresh_var_1 -> (
                                            match c1 with
                                              | Red N_fresh_var_2 -> False
                                              | Black N_fresh_var_2 -> True))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 21:42:40.379012-05:00
Checking boundary for:Leaf
2019-11-16 21:42:40.440903-05:00
Safe
2019-11-16 21:42:40.440933-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 21:42:48.638319-05:00
Safe
2019-11-16 21:42:48.638345-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 21:42:48.641856-05:00
Safe
2019-11-16 21:42:48.641884-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 21:42:50.964452-05:00
Safe
2019-11-16 21:42:50.964481-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 21:43:02.140062-05:00
Safe
2019-11-16 21:43:02.140090-05:00
verifying proves postcondition
2019-11-16 21:44:22.219178-05:00
postcondition proven
2019-11-16 21:44:22.219515-05:00
verifying: Leaf
2019-11-16 21:44:22.224962-05:00
Safe
2019-11-16 21:44:22.224973-05:00
verifying: fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 21:44:22.227312-05:00
Safe
2019-11-16 21:44:22.227322-05:00
verifying: fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 21:44:22.229780-05:00
Safe
2019-11-16 21:44:22.229786-05:00
verifying: fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 21:44:45.122748-05:00
Safe
2019-11-16 21:44:45.122952-05:00
verifying: fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 21:45:10.601867-05:00
Not a LR, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 21:52:52.818764-05:00
Answer list length: 31
2019-11-16 21:52:52.822991-05:00
Candidate invariant: fix f1 (r1:rbtree) : bool =
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match min_max_vals r3 r2 with
                                          | JustLeft N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               and (nat_lt n1 n2) (f1 r3))
                                              N_fresh_var_1
                                          | JustRight N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               match c1 with
                                                 | Red N_fresh_var_4 -> False
                                                 | Black N_fresh_var_4 -> 
                                                   and (nat_lt n2 n1) (
                                                     f1 r2))
                                              N_fresh_var_1
                                          | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    (fun (n3:unit) ->
                                                                    match 
                                                                    f1 r3 with
                                                                    | False N_fresh_var_3 -> 
                                                                    False
                                                                    | True N_fresh_var_3 -> 
                                                                    nat_between
                                                                    n3 n1 n2)
                                                                    (#2
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #1
                                                                    N_fresh_var_1)
                                          | Neither N_fresh_var_1 -> (
                                            match c1 with
                                              | Red N_fresh_var_2 -> False
                                              | Black N_fresh_var_2 -> True))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 21:52:52.933610-05:00
Checking boundary for:Leaf
2019-11-16 21:52:52.941459-05:00
Safe
2019-11-16 21:52:52.941477-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 21:52:52.943514-05:00
Safe
2019-11-16 21:52:52.943522-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 21:52:52.944206-05:00
Safe
2019-11-16 21:52:52.944214-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 21:52:53.491418-05:00
Safe
2019-11-16 21:52:53.491449-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 21:52:53.758586-05:00
Safe
2019-11-16 21:52:53.758618-05:00
verifying proves postcondition
2019-11-16 21:54:14.997298-05:00
postcondition proven
2019-11-16 21:54:14.997531-05:00
verifying: Leaf
2019-11-16 21:54:15.001546-05:00
Safe
2019-11-16 21:54:15.001555-05:00
verifying: fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 21:54:15.002235-05:00
Safe
2019-11-16 21:54:15.002241-05:00
verifying: fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 21:54:15.004267-05:00
Safe
2019-11-16 21:54:15.004277-05:00
verifying: fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 21:55:12.907755-05:00
Safe
2019-11-16 21:55:12.908036-05:00
verifying: fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 21:58:26.752336-05:00
Not a LR, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Red\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 21:58:35.211795-05:00
testbed
2019-11-16 21:58:35.211819-05:00
{ TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Red", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Black", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("O", (Value.Tuple [])))));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Black", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Black", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
           (Value.Ctor ("S",
              (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 22:26:25.539519-05:00
Answer list length: 32
2019-11-16 22:26:25.555210-05:00
Candidate invariant: fix f1 (r1:rbtree) : bool =
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match min_max_vals r3 r2 with
                                          | JustLeft N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               and (nat_lt n1 n2) (f1 r3))
                                              N_fresh_var_1
                                          | JustRight N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               match c1 with
                                                 | Red N_fresh_var_4 -> False
                                                 | Black N_fresh_var_4 -> 
                                                   and (nat_lt n2 n1) (
                                                     f1 r2))
                                              N_fresh_var_1
                                          | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    (fun (n3:unit) ->
                                                                    match 
                                                                    f1 r2 with
                                                                    | False N_fresh_var_3 -> 
                                                                    False
                                                                    | True N_fresh_var_3 -> 
                                                                    and
                                                                    (nat_lt
                                                                    n1 n2)
                                                                    (f1 r3))
                                                                    (#2
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #1
                                                                    N_fresh_var_1)
                                          | Neither N_fresh_var_1 -> (
                                            match c1 with
                                              | Red N_fresh_var_2 -> False
                                              | Black N_fresh_var_2 -> True))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 22:27:01.980336-05:00
Checking boundary for:Leaf
2019-11-16 22:27:29.743543-05:00
Safe
2019-11-16 22:27:29.743570-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 22:27:29.771904-05:00
Safe
2019-11-16 22:27:29.771936-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 22:27:29.804596-05:00
Safe
2019-11-16 22:27:29.804621-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 22:27:45.249743-05:00
Safe
2019-11-16 22:27:45.249768-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 22:27:55.816315-05:00
Safe
2019-11-16 22:27:55.816336-05:00
verifying proves postcondition
2019-11-16 22:28:20.552658-05:00
postcondition proven
2019-11-16 22:28:20.552687-05:00
verifying: Leaf
2019-11-16 22:28:20.594451-05:00
Safe
2019-11-16 22:28:20.594480-05:00
verifying: fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 22:28:20.607678-05:00
Safe
2019-11-16 22:28:20.607706-05:00
verifying: fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 22:28:20.617700-05:00
Safe
2019-11-16 22:28:20.617725-05:00
verifying: fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 22:28:37.886885-05:00
Safe
2019-11-16 22:28:37.886917-05:00
verifying: fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 22:28:44.072032-05:00
Not a LR, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 22:29:55.800680-05:00
testbed
2019-11-16 22:29:55.800933-05:00
{ TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Red", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Black", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("O", (Value.Tuple [])))));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Black", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Black", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
           (Value.Ctor ("S",
              (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 23:02:13.034197-05:00
Answer list length: 33
2019-11-16 23:02:13.044415-05:00
Candidate invariant: fix f1 (r1:rbtree) : bool =
  match r1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (c1:unit) ->
                               (fun (r2:unit) ->
                                  (fun (n1:unit) ->
                                     (fun (r3:unit) ->
                                        match min_max_vals r3 r2 with
                                          | JustLeft N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               and (nat_lt n1 n2) (f1 r3))
                                              N_fresh_var_1
                                          | JustRight N_fresh_var_1 -> 
                                            (fun (n2:unit) ->
                                               match c1 with
                                                 | Red N_fresh_var_4 -> False
                                                 | Black N_fresh_var_4 -> 
                                                   and (nat_lt n2 n1) (
                                                     f1 r2))
                                              N_fresh_var_1
                                          | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    (fun (n3:unit) ->
                                                                    match 
                                                                    f1 r2 with
                                                                    | False N_fresh_var_3 -> 
                                                                    False
                                                                    | True N_fresh_var_3 -> 
                                                                    and
                                                                    (nat_lt
                                                                    n3 n1)
                                                                    (f1 r3))
                                                                    (#2
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #1
                                                                    N_fresh_var_1)
                                          | Neither N_fresh_var_1 -> (
                                            match c1 with
                                              | Red N_fresh_var_2 -> False
                                              | Black N_fresh_var_2 -> True))
                                       (#4 N_fresh_var_0))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 23:05:19.800983-05:00
Checking boundary for:Leaf
2019-11-16 23:05:40.391636-05:00
Safe
2019-11-16 23:05:40.391663-05:00
Checking boundary for:fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 23:05:40.416534-05:00
Safe
2019-11-16 23:05:40.416554-05:00
Checking boundary for:fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 23:05:40.428871-05:00
Safe
2019-11-16 23:05:40.428881-05:00
Checking boundary for:fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 23:06:01.120827-05:00
Safe
2019-11-16 23:06:01.120858-05:00
Checking boundary for:fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 23:06:41.877882-05:00
Safe
2019-11-16 23:06:41.877910-05:00
verifying proves postcondition
2019-11-16 23:08:25.786804-05:00
postcondition proven
2019-11-16 23:08:25.787029-05:00
verifying: Leaf
2019-11-16 23:08:25.796512-05:00
Safe
2019-11-16 23:08:25.796528-05:00
verifying: fix size (b:rbtree) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#2 b)) (size (#4 b)))
2019-11-16 23:08:25.800381-05:00
Safe
2019-11-16 23:08:25.800391-05:00
verifying: fix lookup (b:rbtree) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#3 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#3 b) with
                                     | True c -> lookup (#2 b) x
                                     | False c -> lookup (#4 b) x))
2019-11-16 23:08:25.807432-05:00
Safe
2019-11-16 23:08:25.807452-05:00
verifying: fix insert (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Black, Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#3 bp) with
                      | True c -> Node (Black, insert (#2 bp) x, #3 bp,
                                         #4 bp)
                      | False c -> (match nat_eq x (#3 bp) with
                                      | True c -> b
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          insert (#4 bp) x)))
2019-11-16 23:08:48.375179-05:00
Safe
2019-11-16 23:08:48.375214-05:00
verifying: fix delete (b:rbtree) : nat -> rbtree =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#3 bp) with
                      | True c -> (match #2 bp with
                                     | Leaf bl -> #4 bp
                                     | Node bl -> (match #4 bp with
                                                     | Leaf br -> #2 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (Black,
                                                                    #2 bp, m,
                                                                    delete
                                                                    (#4 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#4 bp))))
                      | False c -> (match nat_lt x (#3 bp) with
                                      | True c -> Node (Black,
                                                         delete (#2 bp) x,
                                                         #3 bp, #4 bp)
                                      | False c -> Node (Black, #2 bp, 
                                                          #3 bp,
                                                          delete (#4 bp) x)))
2019-11-16 23:08:55.837618-05:00
Not a LR, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Black\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Black\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 23:10:18.221479-05:00
testbed
2019-11-16 23:10:18.221567-05:00
{ TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Red", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Black", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Black", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("O", (Value.Tuple [])))));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Red", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Red", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Black", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Black", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
           (Value.Ctor ("S",
              (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Black", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Black", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
interrupt: 2
