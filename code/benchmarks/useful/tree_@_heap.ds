type tree = mu tree .
  | Leaf
  | Node of (tree * nat * tree)

type nat_option =
  | None
  | Some of nat 

struct
  type t = tree

  let empty = Leaf ;;

  let length =
    fix (length : t -> nat) =
      fun (b : t) ->
        match b binding b with
        | Leaf -> O
        | Node -> S (add (length b.0) (length b.2))
  ;;

  (* added function *)
  let true_maximum =
    fix (true_maximum : t -> nat) =
      fun (b : t) ->
        match b binding b with
        | Leaf -> O
        | Node ->
          (fun (bml : nat) ->
            (fun (bmr : nat) ->
              (match nat_lt bml b.1 binding c with
               | True ->
                 (match nat_lt b.1 bmr binding c with
                  | True -> bmr
                  | False -> b.1)
               | False ->
                 (match nat_lt bml bmr binding c with
                  | True -> bmr
                  | False -> bml)))
            (true_maximum b.2))
          (true_maximum b.0)
  ;;


  let maximum =
    fun (b : t) ->
      match b binding b with
      | Leaf -> None
      | Node -> Some (b.1)
  ;;

  let insert =
    fix (insert : t -> nat -> t) =
      fun (x : t) ->
        fun (n : nat) ->
          match x binding vs with
          | Leaf -> Node(Leaf,n,Leaf)
          | Node ->
            (match (nat_lt (length vs.0) (length vs.2)) binding c with
             | True ->
               (match (nat_lt vs.1 n) binding c with
                | True -> Node((insert vs.0 vs.1),n,vs.2)
                | False -> Node((insert vs.0 n),vs.1,vs.2))
             | False ->
               (match (nat_lt vs.1 n) binding c with
                | True -> Node(vs.0,n,(insert vs.2 vs.1))
                | False -> Node(vs.0,vs.1,(insert vs.2 n))))

  ;;

  let merge =
    fix (merge : t -> t -> t) =
      fun (h1 : t) ->
        fun (h2 : t) ->
          match h1 binding vs1 with
          | Leaf -> h2
          | Node ->
            (match h2 binding vs2 with
             | Leaf -> h1
             | Node ->
               (match nat_lt vs1.1 vs2.1 binding c with
                | True -> Node (h1,vs2.1,merge vs2.0 vs2.2)
                | False -> Node (h2,vs1.1,merge vs1.0 vs1.2)))
  ;;

  let pop =
    fun (x : t) ->
      match x binding vs with
      | Leaf -> (None,Leaf)
      | Node -> (Some (vs.1),merge vs.0 vs.2)
  ;;

  let contains =
    fix (contains : t -> nat -> bool) =
      fun (x : t) ->
        fun (n : nat) ->
          match x binding vs with
          | Leaf -> False
          | Node ->
            (match nat_eq vs.1 n binding c with
             | True -> True
             | False -> or (contains vs.0 n) (contains vs.2 n))
  ;;
end
:
sig
  type t

  val empty : t

  val length : t -> nat
  val maximum : t -> nat_option

  val insert : t -> nat -> t
  val pop : t -> nat_option * t

  val contains : t -> nat -> bool
end

maintains

forall (h : t) .
  forall (j : nat) .
    (match maximum h binding m with
     | None -> True
     | Some -> (match nat_lt m j binding g with
                | True -> not (contains h j)
                | False -> True))
