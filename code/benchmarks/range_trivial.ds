struct
  type natnatoption =
    | None
    | Some of nat * nat

  type t = natnatoption

  let empty = None ;;

  let is_empty =
    fun (r : t) ->
      (match r binding r with
       | None -> (True)
       | Some -> (False))
  ;;

  let contains =
    fun (r : t) -> fun (n : nat) ->
      match r binding r with
      | None -> False
      | Some ->
        (match cmp_nat r.0 n binding c with
         | LT -> (match cmp_nat r.1 n binding c with
                  | LT -> False
                  | EQ -> True
                  | GT -> True)
         | EQ -> True
         | GT -> False)
  ;;

  let expand =
    fun (r : t) -> fun (n : nat) ->
      match r binding rp with
      | None -> Some (n,n)
      | Some ->
        (match cmp_nat rp.0 n binding c with
         | LT -> (match cmp_nat rp.1 n binding c with
                  | LT -> Some (rp.0,n)
                  | EQ -> r
                  | GT -> r)
         | EQ -> r
         | GT -> Some (n,rp.1))
  ;;
end
:
sig
  type t

  val empty : t

  val is_empty : t -> bool

  val contains : t -> nat -> bool

  val expand : t -> nat -> t

  (*val union : t -> t -> t
  val inter : t -> t -> t*)
end

maintains

forall (r : t) .
  forall (i : nat) .
    forall (j : nat) .
      (and
        (contains (expand r i) i)
        (not (contains empty i)))