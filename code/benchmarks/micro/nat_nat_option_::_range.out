2019-11-15 09:21:44.165981-05:00

2019-11-15 09:21:44.167122-05:00
DSInfer========================================================================
2019-11-15 09:21:44.167770-05:00
Answer list length: 2
2019-11-15 09:21:44.167801-05:00
Candidate invariant: fun (x:natnatoption) -> False
2019-11-15 09:21:44.168096-05:00
Checking boundary for:None
2019-11-15 09:21:44.168579-05:00
Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"None\", (Value.Tuple [])))")
                                               Comes from
                                               ()
2019-11-15 09:21:44.168633-05:00
Answer list length: 1
2019-11-15 09:21:44.168657-05:00
Candidate invariant: fun (x:natnatoption) -> True
2019-11-15 09:21:44.169359-05:00
Checking boundary for:None
2019-11-15 09:21:44.169536-05:00
Safe
2019-11-15 09:21:44.169552-05:00
Checking boundary for:fun (r:natnatoption) -> match r with
                          | None r -> True
                          | Some r -> False
2019-11-15 09:21:44.169744-05:00
Safe
2019-11-15 09:21:44.169759-05:00
Checking boundary for:fun (r:natnatoption) ->
  fun (n:nat) ->
    match r with
      | None r -> False
      | Some r -> (match nat_eq (#1 r) n with
                     | True c -> True
                     | False c -> (match nat_lt (#1 r) n with
                                     | True c -> (match nat_lt (#2 r) n with
                                                    | True c -> False
                                                    | False c -> True)
                                     | False c -> False))
2019-11-15 09:21:44.169975-05:00
Safe
2019-11-15 09:21:44.169990-05:00
Checking boundary for:fun (r:natnatoption) ->
  fun (n:nat) ->
    match r with
      | None rp -> Some (n, n)
      | Some rp -> (match nat_lt (#1 rp) n with
                      | True c -> (match nat_lt (#2 rp) n with
                                     | True c -> Some (#1 rp, n)
                                     | False c -> r)
                      | False c -> (match nat_eq (#1 rp) n with
                                      | True c -> r
                                      | False c -> Some (n, #2 rp)))
2019-11-15 09:21:44.170641-05:00
Safe
2019-11-15 09:21:44.170660-05:00
verifying proves postcondition
2019-11-15 09:21:44.175426-05:00
postcondition unproven, counterexample: ("(Value.Ctor (\"Some\",\n   (Value.Tuple\n      [(Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"O\", (Value.Tuple [])))])\n   ))")
1
2019-11-15 09:21:44.175500-05:00
testbed
2019-11-15 09:21:44.175515-05:00
{ TestBed.neg_tests =
  [(Value.Ctor ("Some",
      (Value.Tuple
         [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("O", (Value.Tuple [])))])
      ))
    ];
  pos_tests = [(Value.Ctor ("None", (Value.Tuple [])))] }
2019-11-15 09:21:44.176767-05:00
Answer list length: 2
2019-11-15 09:21:44.176790-05:00
Candidate invariant: fun (n1:natnatoption) -> is_empty n1
2019-11-15 09:21:44.176923-05:00
Checking boundary for:None
2019-11-15 09:21:44.177552-05:00
Safe
2019-11-15 09:21:44.177572-05:00
Checking boundary for:fun (r:natnatoption) -> match r with
                          | None r -> True
                          | Some r -> False
2019-11-15 09:21:44.177761-05:00
Safe
2019-11-15 09:21:44.177789-05:00
Checking boundary for:fun (r:natnatoption) ->
  fun (n:nat) ->
    match r with
      | None r -> False
      | Some r -> (match nat_eq (#1 r) n with
                     | True c -> True
                     | False c -> (match nat_lt (#1 r) n with
                                     | True c -> (match nat_lt (#2 r) n with
                                                    | True c -> False
                                                    | False c -> True)
                                     | False c -> False))
2019-11-15 09:21:44.178108-05:00
Safe
2019-11-15 09:21:44.178126-05:00
Checking boundary for:fun (r:natnatoption) ->
  fun (n:nat) ->
    match r with
      | None rp -> Some (n, n)
      | Some rp -> (match nat_lt (#1 rp) n with
                      | True c -> (match nat_lt (#2 rp) n with
                                     | True c -> Some (#1 rp, n)
                                     | False c -> r)
                      | False c -> (match nat_eq (#1 rp) n with
                                      | True c -> r
                                      | False c -> Some (n, #2 rp)))
2019-11-15 09:21:44.178389-05:00
Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Some\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"None\", (Value.Tuple [])))")
2019-11-15 09:21:44.178422-05:00
Answer list length: 1
2019-11-15 09:21:44.178431-05:00
Candidate invariant: fun (x:natnatoption) -> True
2019-11-15 09:21:44.178595-05:00
Checking boundary for:None
2019-11-15 09:21:44.178758-05:00
Safe
2019-11-15 09:21:44.178768-05:00
Checking boundary for:fun (r:natnatoption) -> match r with
                          | None r -> True
                          | Some r -> False
2019-11-15 09:21:44.178975-05:00
Safe
2019-11-15 09:21:44.178986-05:00
Checking boundary for:fun (r:natnatoption) ->
  fun (n:nat) ->
    match r with
      | None r -> False
      | Some r -> (match nat_eq (#1 r) n with
                     | True c -> True
                     | False c -> (match nat_lt (#1 r) n with
                                     | True c -> (match nat_lt (#2 r) n with
                                                    | True c -> False
                                                    | False c -> True)
                                     | False c -> False))
2019-11-15 09:21:44.179200-05:00
Safe
2019-11-15 09:21:44.179210-05:00
Checking boundary for:fun (r:natnatoption) ->
  fun (n:nat) ->
    match r with
      | None rp -> Some (n, n)
      | Some rp -> (match nat_lt (#1 rp) n with
                      | True c -> (match nat_lt (#2 rp) n with
                                     | True c -> Some (#1 rp, n)
                                     | False c -> r)
                      | False c -> (match nat_eq (#1 rp) n with
                                      | True c -> r
                                      | False c -> Some (n, #2 rp)))
2019-11-15 09:21:44.180396-05:00
Safe
2019-11-15 09:21:44.180409-05:00
Prior counterexample: ("(Value.Ctor (\"Some\",\n   (Value.Tuple\n      [(Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"O\", (Value.Tuple [])))])\n   ))")
3
2019-11-15 09:21:44.180454-05:00
testbed
2019-11-15 09:21:44.180463-05:00
{ TestBed.neg_tests =
  [(Value.Ctor ("Some",
      (Value.Tuple
         [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("O", (Value.Tuple [])))])
      ))
    ];
  pos_tests =
  [(Value.Ctor ("Some",
      (Value.Tuple
         [(Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])))])
      ));
    (Value.Ctor ("None", (Value.Tuple [])))]
  }
2019-11-15 09:21:44.245460-05:00
Answer list length: 2
2019-11-15 09:21:44.245503-05:00
Candidate invariant: fun (n1:natnatoption) ->
  match n1 with
    | None N_fresh_var_0 -> True
    | Some N_fresh_var_0 -> (fun (n2:unit) ->
                               (fun (n3:unit) ->
                                  match n2 with
                                    | O N_fresh_var_1 -> True
                                    | S N_fresh_var_1 -> (fun (n4:unit) ->
                                                            False)
                                                           N_fresh_var_1)
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 09:21:44.245677-05:00
Checking boundary for:None
2019-11-15 09:21:44.245962-05:00
Safe
2019-11-15 09:21:44.245972-05:00
Checking boundary for:fun (r:natnatoption) -> match r with
                          | None r -> True
                          | Some r -> False
2019-11-15 09:21:44.246158-05:00
Safe
2019-11-15 09:21:44.246168-05:00
Checking boundary for:fun (r:natnatoption) ->
  fun (n:nat) ->
    match r with
      | None r -> False
      | Some r -> (match nat_eq (#1 r) n with
                     | True c -> True
                     | False c -> (match nat_lt (#1 r) n with
                                     | True c -> (match nat_lt (#2 r) n with
                                                    | True c -> False
                                                    | False c -> True)
                                     | False c -> False))
2019-11-15 09:21:44.246364-05:00
Safe
2019-11-15 09:21:44.246374-05:00
Checking boundary for:fun (r:natnatoption) ->
  fun (n:nat) ->
    match r with
      | None rp -> Some (n, n)
      | Some rp -> (match nat_lt (#1 rp) n with
                      | True c -> (match nat_lt (#2 rp) n with
                                     | True c -> Some (#1 rp, n)
                                     | False c -> r)
                      | False c -> (match nat_eq (#1 rp) n with
                                      | True c -> r
                                      | False c -> Some (n, #2 rp)))
2019-11-15 09:21:44.246635-05:00
Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Some\",\n   (Value.Tuple\n      [(Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"None\", (Value.Tuple [])))")
2019-11-15 09:21:44.246672-05:00
Answer list length: 1
2019-11-15 09:21:44.246681-05:00
Candidate invariant: fun (x:natnatoption) -> True
2019-11-15 09:21:44.246786-05:00
Checking boundary for:None
2019-11-15 09:21:44.246967-05:00
Safe
2019-11-15 09:21:44.246977-05:00
Checking boundary for:fun (r:natnatoption) -> match r with
                          | None r -> True
                          | Some r -> False
2019-11-15 09:21:44.247145-05:00
Safe
2019-11-15 09:21:44.247154-05:00
Checking boundary for:fun (r:natnatoption) ->
  fun (n:nat) ->
    match r with
      | None r -> False
      | Some r -> (match nat_eq (#1 r) n with
                     | True c -> True
                     | False c -> (match nat_lt (#1 r) n with
                                     | True c -> (match nat_lt (#2 r) n with
                                                    | True c -> False
                                                    | False c -> True)
                                     | False c -> False))
2019-11-15 09:21:44.247432-05:00
Safe
2019-11-15 09:21:44.247442-05:00
Checking boundary for:fun (r:natnatoption) ->
  fun (n:nat) ->
    match r with
      | None rp -> Some (n, n)
      | Some rp -> (match nat_lt (#1 rp) n with
                      | True c -> (match nat_lt (#2 rp) n with
                                     | True c -> Some (#1 rp, n)
                                     | False c -> r)
                      | False c -> (match nat_eq (#1 rp) n with
                                      | True c -> r
                                      | False c -> Some (n, #2 rp)))
2019-11-15 09:21:44.248955-05:00
Safe
2019-11-15 09:21:44.248969-05:00
Prior counterexample: ("(Value.Ctor (\"Some\",\n   (Value.Tuple\n      [(Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"O\", (Value.Tuple [])))])\n   ))")
4
2019-11-15 09:21:44.249047-05:00
testbed
2019-11-15 09:21:44.249056-05:00
{ TestBed.neg_tests =
  [(Value.Ctor ("Some",
      (Value.Tuple
         [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("O", (Value.Tuple [])))])
      ))
    ];
  pos_tests =
  [(Value.Ctor ("Some",
      (Value.Tuple
         [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))])
      ));
    (Value.Ctor ("Some",
       (Value.Tuple
          [(Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])))])
       ));
    (Value.Ctor ("None", (Value.Tuple [])))]
  }
2019-11-15 09:21:44.264249-05:00
Answer list length: 2
2019-11-15 09:21:44.264290-05:00
Candidate invariant: fun (n1:natnatoption) ->
  match n1 with
    | None N_fresh_var_0 -> True
    | Some N_fresh_var_0 -> (fun (n2:unit) ->
                               (fun (n3:unit) -> nat_eq n3 n2)
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 09:21:44.264457-05:00
Checking boundary for:None
2019-11-15 09:21:44.264630-05:00
Safe
2019-11-15 09:21:44.264640-05:00
Checking boundary for:fun (r:natnatoption) -> match r with
                          | None r -> True
                          | Some r -> False
2019-11-15 09:21:44.264849-05:00
Safe
2019-11-15 09:21:44.264859-05:00
Checking boundary for:fun (r:natnatoption) ->
  fun (n:nat) ->
    match r with
      | None r -> False
      | Some r -> (match nat_eq (#1 r) n with
                     | True c -> True
                     | False c -> (match nat_lt (#1 r) n with
                                     | True c -> (match nat_lt (#2 r) n with
                                                    | True c -> False
                                                    | False c -> True)
                                     | False c -> False))
2019-11-15 09:21:44.265060-05:00
Safe
2019-11-15 09:21:44.265069-05:00
Checking boundary for:fun (r:natnatoption) ->
  fun (n:nat) ->
    match r with
      | None rp -> Some (n, n)
      | Some rp -> (match nat_lt (#1 rp) n with
                      | True c -> (match nat_lt (#2 rp) n with
                                     | True c -> Some (#1 rp, n)
                                     | False c -> r)
                      | False c -> (match nat_eq (#1 rp) n with
                                      | True c -> r
                                      | False c -> Some (n, #2 rp)))
2019-11-15 09:21:44.266865-05:00
Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Some\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Some\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])))])\n   ))")
2019-11-15 09:21:44.266915-05:00
Answer list length: 1
2019-11-15 09:21:44.266924-05:00
Candidate invariant: fun (x:natnatoption) -> True
2019-11-15 09:21:44.267033-05:00
Checking boundary for:None
2019-11-15 09:21:44.267214-05:00
Safe
2019-11-15 09:21:44.267224-05:00
Checking boundary for:fun (r:natnatoption) -> match r with
                          | None r -> True
                          | Some r -> False
2019-11-15 09:21:44.267391-05:00
Safe
2019-11-15 09:21:44.267400-05:00
Checking boundary for:fun (r:natnatoption) ->
  fun (n:nat) ->
    match r with
      | None r -> False
      | Some r -> (match nat_eq (#1 r) n with
                     | True c -> True
                     | False c -> (match nat_lt (#1 r) n with
                                     | True c -> (match nat_lt (#2 r) n with
                                                    | True c -> False
                                                    | False c -> True)
                                     | False c -> False))
2019-11-15 09:21:44.267655-05:00
Safe
2019-11-15 09:21:44.267665-05:00
Checking boundary for:fun (r:natnatoption) ->
  fun (n:nat) ->
    match r with
      | None rp -> Some (n, n)
      | Some rp -> (match nat_lt (#1 rp) n with
                      | True c -> (match nat_lt (#2 rp) n with
                                     | True c -> Some (#1 rp, n)
                                     | False c -> r)
                      | False c -> (match nat_eq (#1 rp) n with
                                      | True c -> r
                                      | False c -> Some (n, #2 rp)))
2019-11-15 09:21:44.269579-05:00
Safe
2019-11-15 09:21:44.269592-05:00
Prior counterexample: ("(Value.Ctor (\"Some\",\n   (Value.Tuple\n      [(Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"O\", (Value.Tuple [])))])\n   ))")
13
2019-11-15 09:21:44.269748-05:00
testbed
2019-11-15 09:21:44.269757-05:00
{ TestBed.neg_tests =
  [(Value.Ctor ("Some",
      (Value.Tuple
         [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("O", (Value.Tuple [])))])
      ))
    ];
  pos_tests =
  [(Value.Ctor ("Some",
      (Value.Tuple
         [(Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))])
      ));
    (Value.Ctor ("Some",
       (Value.Tuple
          [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))])
       ));
    (Value.Ctor ("Some",
       (Value.Tuple
          [(Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])))])
       ));
    (Value.Ctor ("None", (Value.Tuple [])))]
  }
2019-11-15 09:21:44.272514-05:00
Answer list length: 2
2019-11-15 09:21:44.272532-05:00
Candidate invariant: fun (n1:natnatoption) ->
  match n1 with
    | None N_fresh_var_0 -> True
    | Some N_fresh_var_0 -> (fun (n2:unit) ->
                               (fun (n3:unit) -> contains n1 n3)
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 09:21:44.272667-05:00
Checking boundary for:None
2019-11-15 09:21:44.272859-05:00
Safe
2019-11-15 09:21:44.272869-05:00
Checking boundary for:fun (r:natnatoption) -> match r with
                          | None r -> True
                          | Some r -> False
2019-11-15 09:21:44.273034-05:00
Safe
2019-11-15 09:21:44.273044-05:00
Checking boundary for:fun (r:natnatoption) ->
  fun (n:nat) ->
    match r with
      | None r -> False
      | Some r -> (match nat_eq (#1 r) n with
                     | True c -> True
                     | False c -> (match nat_lt (#1 r) n with
                                     | True c -> (match nat_lt (#2 r) n with
                                                    | True c -> False
                                                    | False c -> True)
                                     | False c -> False))
2019-11-15 09:21:44.273270-05:00
Safe
2019-11-15 09:21:44.273280-05:00
Checking boundary for:fun (r:natnatoption) ->
  fun (n:nat) ->
    match r with
      | None rp -> Some (n, n)
      | Some rp -> (match nat_lt (#1 rp) n with
                      | True c -> (match nat_lt (#2 rp) n with
                                     | True c -> Some (#1 rp, n)
                                     | False c -> r)
                      | False c -> (match nat_eq (#1 rp) n with
                                      | True c -> r
                                      | False c -> Some (n, #2 rp)))
2019-11-15 09:21:44.282216-05:00
Safe
2019-11-15 09:21:44.282241-05:00
verifying proves postcondition
2019-11-15 09:21:44.779087-05:00
postcondition proven
2019-11-15 09:21:44.779154-05:00
verifying: None
2019-11-15 09:21:44.779448-05:00
Safe
2019-11-15 09:21:44.779460-05:00
verifying: fun (r:natnatoption) -> match r with
                          | None r -> True
                          | Some r -> False
2019-11-15 09:21:44.779657-05:00
Safe
2019-11-15 09:21:44.779667-05:00
verifying: fun (r:natnatoption) ->
  fun (n:nat) ->
    match r with
      | None r -> False
      | Some r -> (match nat_eq (#1 r) n with
                     | True c -> True
                     | False c -> (match nat_lt (#1 r) n with
                                     | True c -> (match nat_lt (#2 r) n with
                                                    | True c -> False
                                                    | False c -> True)
                                     | False c -> False))
2019-11-15 09:21:44.779946-05:00
Safe
2019-11-15 09:21:44.779957-05:00
verifying: fun (r:natnatoption) ->
  fun (n:nat) ->
    match r with
      | None rp -> Some (n, n)
      | Some rp -> (match nat_lt (#1 rp) n with
                      | True c -> (match nat_lt (#2 rp) n with
                                     | True c -> Some (#1 rp, n)
                                     | False c -> r)
                      | False c -> (match nat_eq (#1 rp) n with
                                      | True c -> r
                                      | False c -> Some (n, #2 rp)))
2019-11-15 09:21:45.339936-05:00
Safe
fun (n1:natnatoption) ->
  match n1 with
    | None N_fresh_var_0 -> True
    | Some N_fresh_var_0 -> (fun (n2:unit) ->
                               (fun (n3:unit) -> contains n1 n3)
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)