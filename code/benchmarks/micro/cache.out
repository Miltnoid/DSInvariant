2019-11-14 15:10:39.537215-05:00

2019-11-14 15:10:39.537660-05:00
DSInfer========================================================================
2019-11-14 15:10:39.538000-05:00
Answer list length: 2
2019-11-14 15:10:39.538024-05:00
Candidate invariant: fun (x:natoption * natoption) -> False
2019-11-14 15:10:39.538283-05:00
Checking boundary for:(None, None)
2019-11-14 15:10:39.539210-05:00
Boundary Not Satisfied, counterexample:
                                               ("(Value.Tuple\n   [(Value.Ctor (\"None\", (Value.Tuple [])));\n     (Value.Ctor (\"None\", (Value.Tuple [])))])")
                                               Comes from
                                               ()
2019-11-14 15:10:39.539251-05:00
Answer list length: 1
2019-11-14 15:10:39.539265-05:00
Candidate invariant: fun (x:natoption * natoption) -> True
2019-11-14 15:10:39.539405-05:00
Checking boundary for:(None, None)
2019-11-14 15:10:39.539611-05:00
Safe
2019-11-14 15:10:39.539633-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  match #1 r with
    | None b -> (match #2 r with
                   | None b -> True
                   | Some b -> False)
    | Some b -> False
2019-11-14 15:10:39.539862-05:00
Safe
2019-11-14 15:10:39.539878-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> False
      | Some z -> (match nat_eq z n with
                     | True c -> True
                     | False c -> (match #2 r with
                                     | None z -> False
                                     | Some z -> nat_eq z n))
2019-11-14 15:10:39.540116-05:00
Safe
2019-11-14 15:10:39.540132-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> (Some n, None)
      | Some z -> (match nat_lt n z with
                     | True c -> (Some n, Some z)
                     | False c -> (Some n, None))
2019-11-14 15:10:39.540670-05:00
Safe
2019-11-14 15:10:39.540688-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> (match #2 r with
                     | None z -> r
                     | Some z -> (match nat_eq z n with
                                    | True c -> (None, None)
                                    | False c -> r))
      | Some z -> (match nat_eq z n with
                     | True c -> (None, #2 r)
                     | False c -> (match nat_lt z n with
                                     | True c -> (match #2 r with
                                                    | None z -> r
                                                    | Some z -> (match 
                                                                   nat_eq z n with
                                                                   | True c -> 
                                                                    (#1 r,
                                                                    None)
                                                                   | False c -> r))
                                     | False c -> r))
2019-11-14 15:10:39.541186-05:00
Safe
2019-11-14 15:10:39.541206-05:00
verifying proves postcondition
2019-11-14 15:10:39.542683-05:00
postcondition unproven, counterexample: ("(Value.Tuple\n   [(Value.Ctor (\"Some\",\n       (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n     (Value.Ctor (\"Some\", (Value.Ctor (\"O\", (Value.Tuple [])))))])")
2019-11-14 15:10:39.542739-05:00
testbed
2019-11-14 15:10:39.542755-05:00
{ TestBed.neg_tests =
  [(Value.Tuple
      [(Value.Ctor ("Some",
          (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
        (Value.Ctor ("Some", (Value.Ctor ("O", (Value.Tuple [])))))])
    ];
  pos_tests =
  [(Value.Tuple
      [(Value.Ctor ("None", (Value.Tuple [])));
        (Value.Ctor ("None", (Value.Tuple [])))])
    ]
  }
2019-11-14 15:10:39.549173-05:00
Answer list length: 2
2019-11-14 15:10:39.549224-05:00
Candidate invariant: fun (t1:natoption * natoption) -> is_empty (#2 empty, #2 t1)
2019-11-14 15:10:39.549499-05:00
Checking boundary for:(None, None)
2019-11-14 15:10:39.549888-05:00
Safe
2019-11-14 15:10:39.549900-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  match #1 r with
    | None b -> (match #2 r with
                   | None b -> True
                   | Some b -> False)
    | Some b -> False
2019-11-14 15:10:39.550618-05:00
Safe
2019-11-14 15:10:39.550632-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> False
      | Some z -> (match nat_eq z n with
                     | True c -> True
                     | False c -> (match #2 r with
                                     | None z -> False
                                     | Some z -> nat_eq z n))
2019-11-14 15:10:39.550888-05:00
Safe
2019-11-14 15:10:39.550899-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> (Some n, None)
      | Some z -> (match nat_lt n z with
                     | True c -> (Some n, Some z)
                     | False c -> (Some n, None))
2019-11-14 15:10:39.551618-05:00
Safe
2019-11-14 15:10:39.551645-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> (match #2 r with
                     | None z -> r
                     | Some z -> (match nat_eq z n with
                                    | True c -> (None, None)
                                    | False c -> r))
      | Some z -> (match nat_eq z n with
                     | True c -> (None, #2 r)
                     | False c -> (match nat_lt z n with
                                     | True c -> (match #2 r with
                                                    | None z -> r
                                                    | Some z -> (match 
                                                                   nat_eq z n with
                                                                   | True c -> 
                                                                    (#1 r,
                                                                    None)
                                                                   | False c -> r))
                                     | False c -> r))
2019-11-14 15:10:39.552397-05:00
Safe
2019-11-14 15:10:39.552413-05:00
verifying proves postcondition
2019-11-14 15:10:39.603292-05:00
postcondition proven
2019-11-14 15:10:39.603336-05:00
verifying: (None, None)
2019-11-14 15:10:39.603649-05:00
Safe
2019-11-14 15:10:39.603659-05:00
verifying: fun (r:natoption * natoption) ->
  match #1 r with
    | None b -> (match #2 r with
                   | None b -> True
                   | Some b -> False)
    | Some b -> False
2019-11-14 15:10:39.603875-05:00
Safe
2019-11-14 15:10:39.603885-05:00
verifying: fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> False
      | Some z -> (match nat_eq z n with
                     | True c -> True
                     | False c -> (match #2 r with
                                     | None z -> False
                                     | Some z -> nat_eq z n))
2019-11-14 15:10:39.604112-05:00
Safe
2019-11-14 15:10:39.604122-05:00
verifying: fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> (Some n, None)
      | Some z -> (match nat_lt n z with
                     | True c -> (Some n, Some z)
                     | False c -> (Some n, None))
2019-11-14 15:10:39.605139-05:00
Not a LR, counterexample:
                                               ("(Value.Tuple\n   [(Value.Ctor (\"Some\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n     (Value.Ctor (\"Some\",\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))))\n     ])")
                                               Comes from
                                               ("(Value.Tuple\n   [(Value.Ctor (\"Some\",\n       (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n     (Value.Ctor (\"None\", (Value.Tuple [])))])")
2019-11-14 15:10:39.605242-05:00
testbed
2019-11-14 15:10:39.605252-05:00
{ TestBed.neg_tests =
  [(Value.Tuple
      [(Value.Ctor ("Some",
          (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
        (Value.Ctor ("None", (Value.Tuple [])))]);
    (Value.Tuple
       [(Value.Ctor ("Some",
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
         (Value.Ctor ("Some", (Value.Ctor ("O", (Value.Tuple [])))))])
    ];
  pos_tests =
  [(Value.Tuple
      [(Value.Ctor ("None", (Value.Tuple [])));
        (Value.Ctor ("None", (Value.Tuple [])))])
    ]
  }
2019-11-14 15:10:39.605479-05:00
Answer list length: 3
2019-11-14 15:10:39.605491-05:00
Candidate invariant: fun (t1:natoption * natoption) -> is_empty (#2 empty, #1 t1)
2019-11-14 15:10:39.605643-05:00
Checking boundary for:(None, None)
2019-11-14 15:10:39.605836-05:00
Safe
2019-11-14 15:10:39.605846-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  match #1 r with
    | None b -> (match #2 r with
                   | None b -> True
                   | Some b -> False)
    | Some b -> False
2019-11-14 15:10:39.606047-05:00
Safe
2019-11-14 15:10:39.606057-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> False
      | Some z -> (match nat_eq z n with
                     | True c -> True
                     | False c -> (match #2 r with
                                     | None z -> False
                                     | Some z -> nat_eq z n))
2019-11-14 15:10:39.606303-05:00
Safe
2019-11-14 15:10:39.606313-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> (Some n, None)
      | Some z -> (match nat_lt n z with
                     | True c -> (Some n, Some z)
                     | False c -> (Some n, None))
2019-11-14 15:10:39.606541-05:00
Boundary Not Satisfied, counterexample:
                                               ("(Value.Tuple\n   [(Value.Ctor (\"Some\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n     (Value.Ctor (\"None\", (Value.Tuple [])))])")
                                               Comes from
                                               ("(Value.Tuple\n   [(Value.Ctor (\"None\", (Value.Tuple [])));\n     (Value.Ctor (\"None\", (Value.Tuple [])))])")
2019-11-14 15:10:39.606594-05:00
Answer list length: 2
2019-11-14 15:10:39.606604-05:00
Candidate invariant: fun (t1:natoption * natoption) -> is_empty (#2 empty, #2 t1)
2019-11-14 15:10:39.606727-05:00
Checking boundary for:(None, None)
2019-11-14 15:10:39.606919-05:00
Safe
2019-11-14 15:10:39.606929-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  match #1 r with
    | None b -> (match #2 r with
                   | None b -> True
                   | Some b -> False)
    | Some b -> False
2019-11-14 15:10:39.607197-05:00
Safe
2019-11-14 15:10:39.607207-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> False
      | Some z -> (match nat_eq z n with
                     | True c -> True
                     | False c -> (match #2 r with
                                     | None z -> False
                                     | Some z -> nat_eq z n))
2019-11-14 15:10:39.607452-05:00
Safe
2019-11-14 15:10:39.607464-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> (Some n, None)
      | Some z -> (match nat_lt n z with
                     | True c -> (Some n, Some z)
                     | False c -> (Some n, None))
2019-11-14 15:10:39.608643-05:00
Safe
2019-11-14 15:10:39.608657-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> (match #2 r with
                     | None z -> r
                     | Some z -> (match nat_eq z n with
                                    | True c -> (None, None)
                                    | False c -> r))
      | Some z -> (match nat_eq z n with
                     | True c -> (None, #2 r)
                     | False c -> (match nat_lt z n with
                                     | True c -> (match #2 r with
                                                    | None z -> r
                                                    | Some z -> (match 
                                                                   nat_eq z n with
                                                                   | True c -> 
                                                                    (#1 r,
                                                                    None)
                                                                   | False c -> r))
                                     | False c -> r))
2019-11-14 15:10:39.609800-05:00
Safe
2019-11-14 15:10:39.609813-05:00
Prior counterexample: ("(Value.Tuple\n   [(Value.Ctor (\"Some\",\n       (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n     (Value.Ctor (\"None\", (Value.Tuple [])))])")
2019-11-14 15:10:39.609904-05:00
testbed
2019-11-14 15:10:39.609913-05:00
{ TestBed.neg_tests =
  [(Value.Tuple
      [(Value.Ctor ("Some",
          (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
        (Value.Ctor ("None", (Value.Tuple [])))]);
    (Value.Tuple
       [(Value.Ctor ("Some",
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
         (Value.Ctor ("Some", (Value.Ctor ("O", (Value.Tuple [])))))])
    ];
  pos_tests =
  [(Value.Tuple
      [(Value.Ctor ("Some", (Value.Ctor ("O", (Value.Tuple [])))));
        (Value.Ctor ("None", (Value.Tuple [])))]);
    (Value.Tuple
       [(Value.Ctor ("None", (Value.Tuple [])));
         (Value.Ctor ("None", (Value.Tuple [])))])
    ]
  }
2019-11-14 15:10:39.675425-05:00
Answer list length: 3
2019-11-14 15:10:39.675470-05:00
Candidate invariant: fun (t1:natoption * natoption) -> is_empty (delete (#2 empty, #1 t1) 0)
2019-11-14 15:10:39.675663-05:00
Checking boundary for:(None, None)
2019-11-14 15:10:39.675887-05:00
Safe
2019-11-14 15:10:39.675897-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  match #1 r with
    | None b -> (match #2 r with
                   | None b -> True
                   | Some b -> False)
    | Some b -> False
2019-11-14 15:10:39.676102-05:00
Safe
2019-11-14 15:10:39.676112-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> False
      | Some z -> (match nat_eq z n with
                     | True c -> True
                     | False c -> (match #2 r with
                                     | None z -> False
                                     | Some z -> nat_eq z n))
2019-11-14 15:10:39.676363-05:00
Safe
2019-11-14 15:10:39.676373-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> (Some n, None)
      | Some z -> (match nat_lt n z with
                     | True c -> (Some n, Some z)
                     | False c -> (Some n, None))
2019-11-14 15:10:39.676668-05:00
Boundary Not Satisfied, counterexample:
                                               ("(Value.Tuple\n   [(Value.Ctor (\"Some\",\n       (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n     (Value.Ctor (\"None\", (Value.Tuple [])))])")
                                               Comes from
                                               ("(Value.Tuple\n   [(Value.Ctor (\"None\", (Value.Tuple [])));\n     (Value.Ctor (\"None\", (Value.Tuple [])))])")
2019-11-14 15:10:39.676736-05:00
Answer list length: 2
2019-11-14 15:10:39.676746-05:00
Candidate invariant: fun (t1:natoption * natoption) -> is_empty (#2 empty, #2 t1)
2019-11-14 15:10:39.676971-05:00
Checking boundary for:(None, None)
2019-11-14 15:10:39.677261-05:00
Safe
2019-11-14 15:10:39.677273-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  match #1 r with
    | None b -> (match #2 r with
                   | None b -> True
                   | Some b -> False)
    | Some b -> False
2019-11-14 15:10:39.677502-05:00
Safe
2019-11-14 15:10:39.677570-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> False
      | Some z -> (match nat_eq z n with
                     | True c -> True
                     | False c -> (match #2 r with
                                     | None z -> False
                                     | Some z -> nat_eq z n))
2019-11-14 15:10:39.677812-05:00
Safe
2019-11-14 15:10:39.677823-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> (Some n, None)
      | Some z -> (match nat_lt n z with
                     | True c -> (Some n, Some z)
                     | False c -> (Some n, None))
2019-11-14 15:10:39.678921-05:00
Boundary Not Satisfied, counterexample:
                                               ("(Value.Tuple\n   [(Value.Ctor (\"Some\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n     (Value.Ctor (\"Some\",\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))))\n     ])")
                                               Comes from
                                               ("(Value.Tuple\n   [(Value.Ctor (\"Some\",\n       (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n     (Value.Ctor (\"None\", (Value.Tuple [])))])")
2019-11-14 15:10:39.678977-05:00
Answer list length: 1
2019-11-14 15:10:39.678987-05:00
Candidate invariant: fun (x:natoption * natoption) -> True
2019-11-14 15:10:39.679134-05:00
Checking boundary for:(None, None)
2019-11-14 15:10:39.679344-05:00
Safe
2019-11-14 15:10:39.679355-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  match #1 r with
    | None b -> (match #2 r with
                   | None b -> True
                   | Some b -> False)
    | Some b -> False
2019-11-14 15:10:39.679589-05:00
Safe
2019-11-14 15:10:39.679600-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> False
      | Some z -> (match nat_eq z n with
                     | True c -> True
                     | False c -> (match #2 r with
                                     | None z -> False
                                     | Some z -> nat_eq z n))
2019-11-14 15:10:39.679874-05:00
Safe
2019-11-14 15:10:39.679885-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> (Some n, None)
      | Some z -> (match nat_lt n z with
                     | True c -> (Some n, Some z)
                     | False c -> (Some n, None))
2019-11-14 15:10:39.681298-05:00
Safe
2019-11-14 15:10:39.681310-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> (match #2 r with
                     | None z -> r
                     | Some z -> (match nat_eq z n with
                                    | True c -> (None, None)
                                    | False c -> r))
      | Some z -> (match nat_eq z n with
                     | True c -> (None, #2 r)
                     | False c -> (match nat_lt z n with
                                     | True c -> (match #2 r with
                                                    | None z -> r
                                                    | Some z -> (match 
                                                                   nat_eq z n with
                                                                   | True c -> 
                                                                    (#1 r,
                                                                    None)
                                                                   | False c -> r))
                                     | False c -> r))
2019-11-14 15:10:39.682966-05:00
Safe
2019-11-14 15:10:39.682980-05:00
Prior counterexample: ("(Value.Tuple\n   [(Value.Ctor (\"Some\",\n       (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n     (Value.Ctor (\"Some\", (Value.Ctor (\"O\", (Value.Tuple [])))))])")
2019-11-14 15:10:39.683175-05:00
testbed
2019-11-14 15:10:39.683200-05:00
{ TestBed.neg_tests =
  [(Value.Tuple
      [(Value.Ctor ("Some",
          (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
        (Value.Ctor ("Some", (Value.Ctor ("O", (Value.Tuple [])))))])
    ];
  pos_tests =
  [(Value.Tuple
      [(Value.Ctor ("Some", (Value.Ctor ("O", (Value.Tuple [])))));
        (Value.Ctor ("Some",
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
        ]);
    (Value.Tuple
       [(Value.Ctor ("Some",
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
         (Value.Ctor ("None", (Value.Tuple [])))]);
    (Value.Tuple
       [(Value.Ctor ("Some", (Value.Ctor ("O", (Value.Tuple [])))));
         (Value.Ctor ("None", (Value.Tuple [])))]);
    (Value.Tuple
       [(Value.Ctor ("None", (Value.Tuple [])));
         (Value.Ctor ("None", (Value.Tuple [])))])
    ]
  }
2019-11-14 15:10:39.684602-05:00
Answer list length: 2
2019-11-14 15:10:39.684619-05:00
Candidate invariant: fun (t1:natoption * natoption) -> not (contains (#2 t1, #2 empty) 0)
2019-11-14 15:10:39.684753-05:00
Checking boundary for:(None, None)
2019-11-14 15:10:39.685008-05:00
Safe
2019-11-14 15:10:39.685018-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  match #1 r with
    | None b -> (match #2 r with
                   | None b -> True
                   | Some b -> False)
    | Some b -> False
2019-11-14 15:10:39.685250-05:00
Safe
2019-11-14 15:10:39.685261-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> False
      | Some z -> (match nat_eq z n with
                     | True c -> True
                     | False c -> (match #2 r with
                                     | None z -> False
                                     | Some z -> nat_eq z n))
2019-11-14 15:10:39.685479-05:00
Safe
2019-11-14 15:10:39.685489-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> (Some n, None)
      | Some z -> (match nat_lt n z with
                     | True c -> (Some n, Some z)
                     | False c -> (Some n, None))
2019-11-14 15:10:39.688064-05:00
Safe
2019-11-14 15:10:39.688078-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> (match #2 r with
                     | None z -> r
                     | Some z -> (match nat_eq z n with
                                    | True c -> (None, None)
                                    | False c -> r))
      | Some z -> (match nat_eq z n with
                     | True c -> (None, #2 r)
                     | False c -> (match nat_lt z n with
                                     | True c -> (match #2 r with
                                                    | None z -> r
                                                    | Some z -> (match 
                                                                   nat_eq z n with
                                                                   | True c -> 
                                                                    (#1 r,
                                                                    None)
                                                                   | False c -> r))
                                     | False c -> r))
2019-11-14 15:10:39.690872-05:00
Safe
2019-11-14 15:10:39.690886-05:00
verifying proves postcondition
2019-11-14 15:10:39.695339-05:00
postcondition unproven, counterexample: ("(Value.Tuple\n   [(Value.Ctor (\"Some\",\n       (Value.Ctor (\"S\",\n          (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))))\n       ));\n     (Value.Ctor (\"Some\",\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))))\n     ])")
2019-11-14 15:10:39.695675-05:00
testbed
2019-11-14 15:10:39.695686-05:00
{ TestBed.neg_tests =
  [(Value.Tuple
      [(Value.Ctor ("Some",
          (Value.Ctor ("S",
             (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
          ));
        (Value.Ctor ("Some",
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
        ]);
    (Value.Tuple
       [(Value.Ctor ("Some",
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
         (Value.Ctor ("Some", (Value.Ctor ("O", (Value.Tuple [])))))])
    ];
  pos_tests =
  [(Value.Tuple
      [(Value.Ctor ("Some", (Value.Ctor ("O", (Value.Tuple [])))));
        (Value.Ctor ("Some",
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
        ]);
    (Value.Tuple
       [(Value.Ctor ("Some",
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
         (Value.Ctor ("None", (Value.Tuple [])))]);
    (Value.Tuple
       [(Value.Ctor ("Some", (Value.Ctor ("O", (Value.Tuple [])))));
         (Value.Ctor ("None", (Value.Tuple [])))]);
    (Value.Tuple
       [(Value.Ctor ("None", (Value.Tuple [])));
         (Value.Ctor ("None", (Value.Tuple [])))])
    ]
  }
2019-11-14 15:10:39.787443-05:00
Answer list length: 3
2019-11-14 15:10:39.787487-05:00
Candidate invariant: fun (t1:natoption * natoption) ->
  match #1 t1 with
    | None N_fresh_var_0 -> True
    | Some N_fresh_var_0 -> (fun (n1:unit) ->
                               match #2 t1 with
                                 | None N_fresh_var_1 -> True
                                 | Some N_fresh_var_1 -> (fun (n2:unit) ->
                                                            nat_lte n1 n2)
                                                           N_fresh_var_1)
                              N_fresh_var_0
2019-11-14 15:10:39.787666-05:00
Checking boundary for:(None, None)
2019-11-14 15:10:39.787894-05:00
Safe
2019-11-14 15:10:39.787904-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  match #1 r with
    | None b -> (match #2 r with
                   | None b -> True
                   | Some b -> False)
    | Some b -> False
2019-11-14 15:10:39.788112-05:00
Safe
2019-11-14 15:10:39.788122-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> False
      | Some z -> (match nat_eq z n with
                     | True c -> True
                     | False c -> (match #2 r with
                                     | None z -> False
                                     | Some z -> nat_eq z n))
2019-11-14 15:10:39.788359-05:00
Safe
2019-11-14 15:10:39.788369-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> (Some n, None)
      | Some z -> (match nat_lt n z with
                     | True c -> (Some n, Some z)
                     | False c -> (Some n, None))
2019-11-14 15:10:39.790617-05:00
Safe
2019-11-14 15:10:39.790635-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> (match #2 r with
                     | None z -> r
                     | Some z -> (match nat_eq z n with
                                    | True c -> (None, None)
                                    | False c -> r))
      | Some z -> (match nat_eq z n with
                     | True c -> (None, #2 r)
                     | False c -> (match nat_lt z n with
                                     | True c -> (match #2 r with
                                                    | None z -> r
                                                    | Some z -> (match 
                                                                   nat_eq z n with
                                                                   | True c -> 
                                                                    (#1 r,
                                                                    None)
                                                                   | False c -> r))
                                     | False c -> r))
2019-11-14 15:10:39.793047-05:00
Safe
2019-11-14 15:10:39.793061-05:00
verifying proves postcondition
2019-11-14 15:10:40.018773-05:00
postcondition proven
2019-11-14 15:10:40.018820-05:00
verifying: (None, None)
2019-11-14 15:10:40.019132-05:00
Safe
2019-11-14 15:10:40.019144-05:00
verifying: fun (r:natoption * natoption) ->
  match #1 r with
    | None b -> (match #2 r with
                   | None b -> True
                   | Some b -> False)
    | Some b -> False
2019-11-14 15:10:40.019361-05:00
Safe
2019-11-14 15:10:40.019371-05:00
verifying: fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> False
      | Some z -> (match nat_eq z n with
                     | True c -> True
                     | False c -> (match #2 r with
                                     | None z -> False
                                     | Some z -> nat_eq z n))
2019-11-14 15:10:40.019623-05:00
Safe
2019-11-14 15:10:40.019633-05:00
verifying: fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> (Some n, None)
      | Some z -> (match nat_lt n z with
                     | True c -> (Some n, Some z)
                     | False c -> (Some n, None))
2019-11-14 15:10:40.170124-05:00
Safe
2019-11-14 15:10:40.170175-05:00
verifying: fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> (match #2 r with
                     | None z -> r
                     | Some z -> (match nat_eq z n with
                                    | True c -> (None, None)
                                    | False c -> r))
      | Some z -> (match nat_eq z n with
                     | True c -> (None, #2 r)
                     | False c -> (match nat_lt z n with
                                     | True c -> (match #2 r with
                                                    | None z -> r
                                                    | Some z -> (match 
                                                                   nat_eq z n with
                                                                   | True c -> 
                                                                    (#1 r,
                                                                    None)
                                                                   | False c -> r))
                                     | False c -> r))
2019-11-14 15:10:40.457588-05:00
Safe
fun (t1:natoption * natoption) ->
  match #1 t1 with
    | None N_fresh_var_0 -> True
    | Some N_fresh_var_0 -> (fun (n1:unit) ->
                               match #2 t1 with
                                 | None N_fresh_var_1 -> True
                                 | Some N_fresh_var_1 -> (fun (n2:unit) ->
                                                            nat_lte n1 n2)
                                                           N_fresh_var_1)
                              N_fresh_var_0