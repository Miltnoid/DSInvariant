2019-11-15 09:21:43.186921-05:00

2019-11-15 09:21:43.187414-05:00
DSInfer========================================================================
2019-11-15 09:21:43.188785-05:00
Answer list length: 2
2019-11-15 09:21:43.188849-05:00
Candidate invariant: fun (x:natoption * natoption) -> False
2019-11-15 09:21:43.189478-05:00
Checking boundary for:(None, None)
2019-11-15 09:21:43.191462-05:00
Boundary Not Satisfied, counterexample:
                                               ("(Value.Tuple\n   [(Value.Ctor (\"None\", (Value.Tuple [])));\n     (Value.Ctor (\"None\", (Value.Tuple [])))])")
                                               Comes from
                                               ()
2019-11-15 09:21:43.191545-05:00
Answer list length: 1
2019-11-15 09:21:43.191574-05:00
Candidate invariant: fun (x:natoption * natoption) -> True
2019-11-15 09:21:43.191879-05:00
Checking boundary for:(None, None)
2019-11-15 09:21:43.192277-05:00
Safe
2019-11-15 09:21:43.192299-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  match #1 r with
    | None b -> (match #2 r with
                   | None b -> True
                   | Some b -> False)
    | Some b -> False
2019-11-15 09:21:43.192636-05:00
Safe
2019-11-15 09:21:43.192658-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> False
      | Some z -> (match nat_eq z n with
                     | True c -> True
                     | False c -> (match #2 r with
                                     | None z -> False
                                     | Some z -> nat_eq z n))
2019-11-15 09:21:43.193052-05:00
Safe
2019-11-15 09:21:43.193074-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> (Some n, None)
      | Some z -> (match nat_lt n z with
                     | True c -> (Some n, Some z)
                     | False c -> (Some n, None))
2019-11-15 09:21:43.193863-05:00
Safe
2019-11-15 09:21:43.193890-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> (match #2 r with
                     | None z -> r
                     | Some z -> (match nat_eq z n with
                                    | True c -> (None, None)
                                    | False c -> r))
      | Some z -> (match nat_eq z n with
                     | True c -> (None, #2 r)
                     | False c -> (match nat_lt z n with
                                     | True c -> (match #2 r with
                                                    | None z -> r
                                                    | Some z -> (match 
                                                                   nat_eq z n with
                                                                   | True c -> 
                                                                    (#1 r,
                                                                    None)
                                                                   | False c -> r))
                                     | False c -> r))
2019-11-15 09:21:43.194694-05:00
Safe
2019-11-15 09:21:43.194725-05:00
verifying proves postcondition
2019-11-15 09:21:43.196748-05:00
postcondition unproven, counterexample: ("(Value.Tuple\n   [(Value.Ctor (\"Some\",\n       (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n     (Value.Ctor (\"Some\", (Value.Ctor (\"O\", (Value.Tuple [])))))])")
1
2019-11-15 09:21:43.196830-05:00
testbed
2019-11-15 09:21:43.196848-05:00
{ TestBed.neg_tests =
  [(Value.Tuple
      [(Value.Ctor ("Some",
          (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
        (Value.Ctor ("Some", (Value.Ctor ("O", (Value.Tuple [])))))])
    ];
  pos_tests =
  [(Value.Tuple
      [(Value.Ctor ("None", (Value.Tuple [])));
        (Value.Ctor ("None", (Value.Tuple [])))])
    ]
  }
2019-11-15 09:21:43.204242-05:00
Answer list length: 2
2019-11-15 09:21:43.204268-05:00
Candidate invariant: fun (t1:natoption * natoption) -> is_empty (#2 empty, #2 t1)
2019-11-15 09:21:43.204434-05:00
Checking boundary for:(None, None)
2019-11-15 09:21:43.205295-05:00
Safe
2019-11-15 09:21:43.205306-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  match #1 r with
    | None b -> (match #2 r with
                   | None b -> True
                   | Some b -> False)
    | Some b -> False
2019-11-15 09:21:43.205580-05:00
Safe
2019-11-15 09:21:43.205591-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> False
      | Some z -> (match nat_eq z n with
                     | True c -> True
                     | False c -> (match #2 r with
                                     | None z -> False
                                     | Some z -> nat_eq z n))
2019-11-15 09:21:43.205825-05:00
Safe
2019-11-15 09:21:43.205835-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> (Some n, None)
      | Some z -> (match nat_lt n z with
                     | True c -> (Some n, Some z)
                     | False c -> (Some n, None))
2019-11-15 09:21:43.206536-05:00
Safe
2019-11-15 09:21:43.206548-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> (match #2 r with
                     | None z -> r
                     | Some z -> (match nat_eq z n with
                                    | True c -> (None, None)
                                    | False c -> r))
      | Some z -> (match nat_eq z n with
                     | True c -> (None, #2 r)
                     | False c -> (match nat_lt z n with
                                     | True c -> (match #2 r with
                                                    | None z -> r
                                                    | Some z -> (match 
                                                                   nat_eq z n with
                                                                   | True c -> 
                                                                    (#1 r,
                                                                    None)
                                                                   | False c -> r))
                                     | False c -> r))
2019-11-15 09:21:43.207224-05:00
Safe
2019-11-15 09:21:43.207236-05:00
verifying proves postcondition
2019-11-15 09:21:43.255492-05:00
postcondition proven
2019-11-15 09:21:43.255539-05:00
verifying: (None, None)
2019-11-15 09:21:43.255863-05:00
Safe
2019-11-15 09:21:43.255874-05:00
verifying: fun (r:natoption * natoption) ->
  match #1 r with
    | None b -> (match #2 r with
                   | None b -> True
                   | Some b -> False)
    | Some b -> False
2019-11-15 09:21:43.256117-05:00
Safe
2019-11-15 09:21:43.256127-05:00
verifying: fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> False
      | Some z -> (match nat_eq z n with
                     | True c -> True
                     | False c -> (match #2 r with
                                     | None z -> False
                                     | Some z -> nat_eq z n))
2019-11-15 09:21:43.256396-05:00
Safe
2019-11-15 09:21:43.256406-05:00
verifying: fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> (Some n, None)
      | Some z -> (match nat_lt n z with
                     | True c -> (Some n, Some z)
                     | False c -> (Some n, None))
2019-11-15 09:21:43.257517-05:00
Not a LR, counterexample:
                                               ("(Value.Tuple\n   [(Value.Ctor (\"Some\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n     (Value.Ctor (\"Some\",\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))))\n     ])")
                                               Comes from
                                               ("(Value.Tuple\n   [(Value.Ctor (\"Some\",\n       (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n     (Value.Ctor (\"None\", (Value.Tuple [])))])")
3
2019-11-15 09:21:43.257619-05:00
testbed
2019-11-15 09:21:43.257628-05:00
{ TestBed.neg_tests =
  [(Value.Tuple
      [(Value.Ctor ("Some",
          (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
        (Value.Ctor ("None", (Value.Tuple [])))]);
    (Value.Tuple
       [(Value.Ctor ("Some",
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
         (Value.Ctor ("Some", (Value.Ctor ("O", (Value.Tuple [])))))])
    ];
  pos_tests =
  [(Value.Tuple
      [(Value.Ctor ("None", (Value.Tuple [])));
        (Value.Ctor ("None", (Value.Tuple [])))])
    ]
  }
2019-11-15 09:21:43.257898-05:00
Answer list length: 3
2019-11-15 09:21:43.257911-05:00
Candidate invariant: fun (t1:natoption * natoption) -> is_empty (#2 empty, #1 t1)
2019-11-15 09:21:43.258044-05:00
Checking boundary for:(None, None)
2019-11-15 09:21:43.258270-05:00
Safe
2019-11-15 09:21:43.258280-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  match #1 r with
    | None b -> (match #2 r with
                   | None b -> True
                   | Some b -> False)
    | Some b -> False
2019-11-15 09:21:43.258488-05:00
Safe
2019-11-15 09:21:43.258498-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> False
      | Some z -> (match nat_eq z n with
                     | True c -> True
                     | False c -> (match #2 r with
                                     | None z -> False
                                     | Some z -> nat_eq z n))
2019-11-15 09:21:43.258743-05:00
Safe
2019-11-15 09:21:43.258752-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> (Some n, None)
      | Some z -> (match nat_lt n z with
                     | True c -> (Some n, Some z)
                     | False c -> (Some n, None))
2019-11-15 09:21:43.259023-05:00
Boundary Not Satisfied, counterexample:
                                               ("(Value.Tuple\n   [(Value.Ctor (\"Some\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n     (Value.Ctor (\"None\", (Value.Tuple [])))])")
                                               Comes from
                                               ("(Value.Tuple\n   [(Value.Ctor (\"None\", (Value.Tuple [])));\n     (Value.Ctor (\"None\", (Value.Tuple [])))])")
2019-11-15 09:21:43.259076-05:00
Answer list length: 2
2019-11-15 09:21:43.259085-05:00
Candidate invariant: fun (t1:natoption * natoption) -> is_empty (#2 empty, #2 t1)
2019-11-15 09:21:43.259209-05:00
Checking boundary for:(None, None)
2019-11-15 09:21:43.259434-05:00
Safe
2019-11-15 09:21:43.259444-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  match #1 r with
    | None b -> (match #2 r with
                   | None b -> True
                   | Some b -> False)
    | Some b -> False
2019-11-15 09:21:43.259671-05:00
Safe
2019-11-15 09:21:43.259680-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> False
      | Some z -> (match nat_eq z n with
                     | True c -> True
                     | False c -> (match #2 r with
                                     | None z -> False
                                     | Some z -> nat_eq z n))
2019-11-15 09:21:43.259900-05:00
Safe
2019-11-15 09:21:43.259912-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> (Some n, None)
      | Some z -> (match nat_lt n z with
                     | True c -> (Some n, Some z)
                     | False c -> (Some n, None))
2019-11-15 09:21:43.260971-05:00
Safe
2019-11-15 09:21:43.260984-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> (match #2 r with
                     | None z -> r
                     | Some z -> (match nat_eq z n with
                                    | True c -> (None, None)
                                    | False c -> r))
      | Some z -> (match nat_eq z n with
                     | True c -> (None, #2 r)
                     | False c -> (match nat_lt z n with
                                     | True c -> (match #2 r with
                                                    | None z -> r
                                                    | Some z -> (match 
                                                                   nat_eq z n with
                                                                   | True c -> 
                                                                    (#1 r,
                                                                    None)
                                                                   | False c -> r))
                                     | False c -> r))
2019-11-15 09:21:43.262006-05:00
Safe
2019-11-15 09:21:43.262018-05:00
Prior counterexample: ("(Value.Tuple\n   [(Value.Ctor (\"Some\",\n       (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n     (Value.Ctor (\"None\", (Value.Tuple [])))])")
4
2019-11-15 09:21:43.262091-05:00
testbed
2019-11-15 09:21:43.262101-05:00
{ TestBed.neg_tests =
  [(Value.Tuple
      [(Value.Ctor ("Some",
          (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
        (Value.Ctor ("None", (Value.Tuple [])))]);
    (Value.Tuple
       [(Value.Ctor ("Some",
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
         (Value.Ctor ("Some", (Value.Ctor ("O", (Value.Tuple [])))))])
    ];
  pos_tests =
  [(Value.Tuple
      [(Value.Ctor ("Some", (Value.Ctor ("O", (Value.Tuple [])))));
        (Value.Ctor ("None", (Value.Tuple [])))]);
    (Value.Tuple
       [(Value.Ctor ("None", (Value.Tuple [])));
         (Value.Ctor ("None", (Value.Tuple [])))])
    ]
  }
2019-11-15 09:21:43.377824-05:00
Answer list length: 3
2019-11-15 09:21:43.377868-05:00
Candidate invariant: fun (t1:natoption * natoption) ->
  match #1 t1 with
    | None N_fresh_var_0 -> True
    | Some N_fresh_var_0 -> (fun (n1:unit) ->
                               match n1 with
                                 | O N_fresh_var_1 -> True
                                 | S N_fresh_var_1 -> (fun (n2:unit) -> False)
                                                        N_fresh_var_1)
                              N_fresh_var_0
2019-11-15 09:21:43.378055-05:00
Checking boundary for:(None, None)
2019-11-15 09:21:43.378540-05:00
Safe
2019-11-15 09:21:43.378553-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  match #1 r with
    | None b -> (match #2 r with
                   | None b -> True
                   | Some b -> False)
    | Some b -> False
2019-11-15 09:21:43.378866-05:00
Safe
2019-11-15 09:21:43.378878-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> False
      | Some z -> (match nat_eq z n with
                     | True c -> True
                     | False c -> (match #2 r with
                                     | None z -> False
                                     | Some z -> nat_eq z n))
2019-11-15 09:21:43.379265-05:00
Safe
2019-11-15 09:21:43.379278-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> (Some n, None)
      | Some z -> (match nat_lt n z with
                     | True c -> (Some n, Some z)
                     | False c -> (Some n, None))
2019-11-15 09:21:43.379611-05:00
Boundary Not Satisfied, counterexample:
                                               ("(Value.Tuple\n   [(Value.Ctor (\"Some\",\n       (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n     (Value.Ctor (\"None\", (Value.Tuple [])))])")
                                               Comes from
                                               ("(Value.Tuple\n   [(Value.Ctor (\"None\", (Value.Tuple [])));\n     (Value.Ctor (\"None\", (Value.Tuple [])))])")
2019-11-15 09:21:43.379709-05:00
Answer list length: 2
2019-11-15 09:21:43.379720-05:00
Candidate invariant: fun (t1:natoption * natoption) -> is_empty (#2 empty, #2 t1)
2019-11-15 09:21:43.379898-05:00
Checking boundary for:(None, None)
2019-11-15 09:21:43.380150-05:00
Safe
2019-11-15 09:21:43.380161-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  match #1 r with
    | None b -> (match #2 r with
                   | None b -> True
                   | Some b -> False)
    | Some b -> False
2019-11-15 09:21:43.380399-05:00
Safe
2019-11-15 09:21:43.380409-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> False
      | Some z -> (match nat_eq z n with
                     | True c -> True
                     | False c -> (match #2 r with
                                     | None z -> False
                                     | Some z -> nat_eq z n))
2019-11-15 09:21:43.380711-05:00
Safe
2019-11-15 09:21:43.380723-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> (Some n, None)
      | Some z -> (match nat_lt n z with
                     | True c -> (Some n, Some z)
                     | False c -> (Some n, None))
2019-11-15 09:21:43.382086-05:00
Boundary Not Satisfied, counterexample:
                                               ("(Value.Tuple\n   [(Value.Ctor (\"Some\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n     (Value.Ctor (\"Some\",\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))))\n     ])")
                                               Comes from
                                               ("(Value.Tuple\n   [(Value.Ctor (\"Some\",\n       (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n     (Value.Ctor (\"None\", (Value.Tuple [])))])")
2019-11-15 09:21:43.382153-05:00
Answer list length: 1
2019-11-15 09:21:43.382164-05:00
Candidate invariant: fun (x:natoption * natoption) -> True
2019-11-15 09:21:43.382317-05:00
Checking boundary for:(None, None)
2019-11-15 09:21:43.382542-05:00
Safe
2019-11-15 09:21:43.382554-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  match #1 r with
    | None b -> (match #2 r with
                   | None b -> True
                   | Some b -> False)
    | Some b -> False
2019-11-15 09:21:43.382813-05:00
Safe
2019-11-15 09:21:43.382824-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> False
      | Some z -> (match nat_eq z n with
                     | True c -> True
                     | False c -> (match #2 r with
                                     | None z -> False
                                     | Some z -> nat_eq z n))
2019-11-15 09:21:43.383086-05:00
Safe
2019-11-15 09:21:43.383097-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> (Some n, None)
      | Some z -> (match nat_lt n z with
                     | True c -> (Some n, Some z)
                     | False c -> (Some n, None))
2019-11-15 09:21:43.384881-05:00
Safe
2019-11-15 09:21:43.384912-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> (match #2 r with
                     | None z -> r
                     | Some z -> (match nat_eq z n with
                                    | True c -> (None, None)
                                    | False c -> r))
      | Some z -> (match nat_eq z n with
                     | True c -> (None, #2 r)
                     | False c -> (match nat_lt z n with
                                     | True c -> (match #2 r with
                                                    | None z -> r
                                                    | Some z -> (match 
                                                                   nat_eq z n with
                                                                   | True c -> 
                                                                    (#1 r,
                                                                    None)
                                                                   | False c -> r))
                                     | False c -> r))
2019-11-15 09:21:43.387241-05:00
Safe
2019-11-15 09:21:43.387296-05:00
Prior counterexample: ("(Value.Tuple\n   [(Value.Ctor (\"Some\",\n       (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n     (Value.Ctor (\"Some\", (Value.Ctor (\"O\", (Value.Tuple [])))))])")
5
2019-11-15 09:21:43.387451-05:00
testbed
2019-11-15 09:21:43.387462-05:00
{ TestBed.neg_tests =
  [(Value.Tuple
      [(Value.Ctor ("Some",
          (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
        (Value.Ctor ("Some", (Value.Ctor ("O", (Value.Tuple [])))))])
    ];
  pos_tests =
  [(Value.Tuple
      [(Value.Ctor ("Some", (Value.Ctor ("O", (Value.Tuple [])))));
        (Value.Ctor ("Some",
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
        ]);
    (Value.Tuple
       [(Value.Ctor ("Some",
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
         (Value.Ctor ("None", (Value.Tuple [])))]);
    (Value.Tuple
       [(Value.Ctor ("Some", (Value.Ctor ("O", (Value.Tuple [])))));
         (Value.Ctor ("None", (Value.Tuple [])))]);
    (Value.Tuple
       [(Value.Ctor ("None", (Value.Tuple [])));
         (Value.Ctor ("None", (Value.Tuple [])))])
    ]
  }
2019-11-15 09:21:43.391004-05:00
Answer list length: 2
2019-11-15 09:21:43.391026-05:00
Candidate invariant: fun (t1:natoption * natoption) ->
  match #2 t1 with
    | None N_fresh_var_0 -> True
    | Some N_fresh_var_0 -> (fun (n1:unit) ->
                               match n1 with
                                 | O N_fresh_var_1 -> False
                                 | S N_fresh_var_1 -> (fun (n2:unit) -> True)
                                                        N_fresh_var_1)
                              N_fresh_var_0
2019-11-15 09:21:43.391217-05:00
Checking boundary for:(None, None)
2019-11-15 09:21:43.391486-05:00
Safe
2019-11-15 09:21:43.391497-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  match #1 r with
    | None b -> (match #2 r with
                   | None b -> True
                   | Some b -> False)
    | Some b -> False
2019-11-15 09:21:43.391719-05:00
Safe
2019-11-15 09:21:43.391729-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> False
      | Some z -> (match nat_eq z n with
                     | True c -> True
                     | False c -> (match #2 r with
                                     | None z -> False
                                     | Some z -> nat_eq z n))
2019-11-15 09:21:43.392088-05:00
Safe
2019-11-15 09:21:43.392098-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> (Some n, None)
      | Some z -> (match nat_lt n z with
                     | True c -> (Some n, Some z)
                     | False c -> (Some n, None))
2019-11-15 09:21:43.394205-05:00
Safe
2019-11-15 09:21:43.394219-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> (match #2 r with
                     | None z -> r
                     | Some z -> (match nat_eq z n with
                                    | True c -> (None, None)
                                    | False c -> r))
      | Some z -> (match nat_eq z n with
                     | True c -> (None, #2 r)
                     | False c -> (match nat_lt z n with
                                     | True c -> (match #2 r with
                                                    | None z -> r
                                                    | Some z -> (match 
                                                                   nat_eq z n with
                                                                   | True c -> 
                                                                    (#1 r,
                                                                    None)
                                                                   | False c -> r))
                                     | False c -> r))
2019-11-15 09:21:43.396814-05:00
Safe
2019-11-15 09:21:43.396838-05:00
verifying proves postcondition
2019-11-15 09:21:43.401505-05:00
postcondition unproven, counterexample: ("(Value.Tuple\n   [(Value.Ctor (\"Some\",\n       (Value.Ctor (\"S\",\n          (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))))\n       ));\n     (Value.Ctor (\"Some\",\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))))\n     ])")
4
2019-11-15 09:21:43.401722-05:00
testbed
2019-11-15 09:21:43.401733-05:00
{ TestBed.neg_tests =
  [(Value.Tuple
      [(Value.Ctor ("Some",
          (Value.Ctor ("S",
             (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
          ));
        (Value.Ctor ("Some",
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
        ]);
    (Value.Tuple
       [(Value.Ctor ("Some",
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
         (Value.Ctor ("Some", (Value.Ctor ("O", (Value.Tuple [])))))])
    ];
  pos_tests =
  [(Value.Tuple
      [(Value.Ctor ("Some", (Value.Ctor ("O", (Value.Tuple [])))));
        (Value.Ctor ("Some",
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
        ]);
    (Value.Tuple
       [(Value.Ctor ("Some",
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
         (Value.Ctor ("None", (Value.Tuple [])))]);
    (Value.Tuple
       [(Value.Ctor ("Some", (Value.Ctor ("O", (Value.Tuple [])))));
         (Value.Ctor ("None", (Value.Tuple [])))]);
    (Value.Tuple
       [(Value.Ctor ("None", (Value.Tuple [])));
         (Value.Ctor ("None", (Value.Tuple [])))])
    ]
  }
2019-11-15 09:21:43.439523-05:00
Answer list length: 3
2019-11-15 09:21:43.439569-05:00
Candidate invariant: fun (t1:natoption * natoption) ->
  match #1 t1 with
    | None N_fresh_var_0 -> True
    | Some N_fresh_var_0 -> (fun (n1:unit) ->
                               match #2 t1 with
                                 | None N_fresh_var_1 -> True
                                 | Some N_fresh_var_1 -> (fun (n2:unit) ->
                                                            nat_lte n1 n2)
                                                           N_fresh_var_1)
                              N_fresh_var_0
2019-11-15 09:21:43.439760-05:00
Checking boundary for:(None, None)
2019-11-15 09:21:43.439993-05:00
Safe
2019-11-15 09:21:43.440004-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  match #1 r with
    | None b -> (match #2 r with
                   | None b -> True
                   | Some b -> False)
    | Some b -> False
2019-11-15 09:21:43.440272-05:00
Safe
2019-11-15 09:21:43.440292-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> False
      | Some z -> (match nat_eq z n with
                     | True c -> True
                     | False c -> (match #2 r with
                                     | None z -> False
                                     | Some z -> nat_eq z n))
2019-11-15 09:21:43.440525-05:00
Safe
2019-11-15 09:21:43.440534-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> (Some n, None)
      | Some z -> (match nat_lt n z with
                     | True c -> (Some n, Some z)
                     | False c -> (Some n, None))
2019-11-15 09:21:43.443052-05:00
Safe
2019-11-15 09:21:43.443065-05:00
Checking boundary for:fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> (match #2 r with
                     | None z -> r
                     | Some z -> (match nat_eq z n with
                                    | True c -> (None, None)
                                    | False c -> r))
      | Some z -> (match nat_eq z n with
                     | True c -> (None, #2 r)
                     | False c -> (match nat_lt z n with
                                     | True c -> (match #2 r with
                                                    | None z -> r
                                                    | Some z -> (match 
                                                                   nat_eq z n with
                                                                   | True c -> 
                                                                    (#1 r,
                                                                    None)
                                                                   | False c -> r))
                                     | False c -> r))
2019-11-15 09:21:43.445900-05:00
Safe
2019-11-15 09:21:43.445914-05:00
verifying proves postcondition
2019-11-15 09:21:43.656856-05:00
postcondition proven
2019-11-15 09:21:43.656900-05:00
verifying: (None, None)
2019-11-15 09:21:43.657155-05:00
Safe
2019-11-15 09:21:43.657165-05:00
verifying: fun (r:natoption * natoption) ->
  match #1 r with
    | None b -> (match #2 r with
                   | None b -> True
                   | Some b -> False)
    | Some b -> False
2019-11-15 09:21:43.657470-05:00
Safe
2019-11-15 09:21:43.657480-05:00
verifying: fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> False
      | Some z -> (match nat_eq z n with
                     | True c -> True
                     | False c -> (match #2 r with
                                     | None z -> False
                                     | Some z -> nat_eq z n))
2019-11-15 09:21:43.657732-05:00
Safe
2019-11-15 09:21:43.657742-05:00
verifying: fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> (Some n, None)
      | Some z -> (match nat_lt n z with
                     | True c -> (Some n, Some z)
                     | False c -> (Some n, None))
2019-11-15 09:21:43.803660-05:00
Safe
2019-11-15 09:21:43.803712-05:00
verifying: fun (r:natoption * natoption) ->
  fun (n:nat) ->
    match #1 r with
      | None z -> (match #2 r with
                     | None z -> r
                     | Some z -> (match nat_eq z n with
                                    | True c -> (None, None)
                                    | False c -> r))
      | Some z -> (match nat_eq z n with
                     | True c -> (None, #2 r)
                     | False c -> (match nat_lt z n with
                                     | True c -> (match #2 r with
                                                    | None z -> r
                                                    | Some z -> (match 
                                                                   nat_eq z n with
                                                                   | True c -> 
                                                                    (#1 r,
                                                                    None)
                                                                   | False c -> r))
                                     | False c -> r))
2019-11-15 09:21:44.123032-05:00
Safe
fun (t1:natoption * natoption) ->
  match #1 t1 with
    | None N_fresh_var_0 -> True
    | Some N_fresh_var_0 -> (fun (n1:unit) ->
                               match #2 t1 with
                                 | None N_fresh_var_1 -> True
                                 | Some N_fresh_var_1 -> (fun (n2:unit) ->
                                                            nat_lte n1 n2)
                                                           N_fresh_var_1)
                              N_fresh_var_0