type list = mu list .
  | Nil of nat
  | Cons of (nat * nat * list)

struct
  type t = list

  let empty = Nil O ;;

  let set_size =
    fun (n : nat) ->
      fix (size_rec : t -> t) =
        fun (l : t) ->
          match l binding l with
          | Nil -> Nil n
          | Cons -> Cons (n, l.1, size_rec l.2)
  ;;

  let length =
    fun (l : t) ->
      match l binding lp with
      | Nil -> lp
      | Cons -> lp.0
  ;;

  let count =
    fix (count : t -> nat -> nat) =
      fun (l : t) -> fun (x : nat) ->
        match l binding l with
        | Nil -> O
        | Cons ->
          (match nat_eq l.1 x binding c with
           | True -> S (count l.2 x)
           | False -> count l.2 x)
  ;;

  let lookup =
    fun (l : t) -> fun (x : nat) ->
      (not (nat_eq (count l x) O))
  ;;

  let insert =
    fun (l : t) ->
      fun (x : nat) ->
        Cons(S (length l), x, set_size (S (length l)) l)
  ;;

  let minus =
    fix (minus : nat -> nat -> nat) =
      fun (n1 : nat) ->
        fun (n2 : nat) ->
          match n1 binding n1p with
          | O -> O
          | S ->
            (match n2 binding n2p with
             | O -> n1
             | S -> minus n1p n2p)
  ;;

  let delete =
    fun (l : t) -> fun (x : nat) ->
      (set_size
        (minus (length l) (count l x))
      ((fix (delete : nat -> t -> nat -> t) =
      fun (s : nat) -> fun (l : t) -> fun (x : nat) ->
          match s binding sp with
          | O -> l
          | S ->
          (match l binding lp with
           | Nil -> l
           | Cons -> (match nat_eq x lp.1 binding c with
                      | True -> delete sp lp.2 x
                      | False -> (fun (l : t) -> Cons(S (length l), lp.1, l))
                                (delete sp lp.2 x))))
    (length l) l x))
  ;;

(*
  let union =
    fix (union : t -> t -> t) =
      fun (la : t) ->
        fun (lb : t) ->
          match la binding la with
          | Nil -> lb
          | Cons -> (union la.1 (insert lb la.0))
  ;;

  let inter =
    fix (inter : t -> t -> t) =
      fun (la : t) ->
        fun (lb : t) ->
          match la binding la with
          | Nil -> Nil
          | Cons -> (match lookup lb la.0 binding r with
                     | True -> Cons (la.0, (inter la.1 lb))
                     | False -> inter la.1 lb)
  ;;
*)
end
:
sig
  type t

  val empty : t

  val length : t -> nat
  val lookup : t -> nat -> bool

  val insert : t -> nat -> t
  val delete : t -> nat -> t

(*
  val union : t -> t -> t
  val inter : t -> t -> t
*)
end

maintains

forall (s : t) .
  forall (i : nat) .
        (not (lookup (delete s i) i))