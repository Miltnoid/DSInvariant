Let A be assertions of the form
forall (x_1 : t_1) ... forall (x_n : t_n) phi(x_1,...,x_n), where
x_1 : t_1 , ... , x_n : t_n |- phi(x_1,...,x_n) : bool

An assertion is valid if there are no x_1 ... x_n such that -phi(x_1,...,x_n)
An assertion is not valid if there exists some x_1 ... x_n such that -phi(x_1,...,x_n)

A verifier is a function
Verify :: A -> model option

A verifier is sound if:
for all assertions a, if a is not valid
then Verify(a) will return some x_1 ... x_n such that -phi(x_1',...,x_n')

A verifier is complete if:
for all assertions a, if a is valid
then Verify(a) will return None




A synthesizer is a function
Synthesize :: (L -> A) -> L option

A synthesizer is sound if, given a function f from the language to A
if there does not exists a function l such that f(l) is satisfiable,
Synthesize(f) will return None.

A synthesizer is complete if, given a function f from the language to A
if there exists a function l such that f(l) is satisfiable,
Synthesize(f) will satisfy such a function.





LoopInvGen :: Synthesizer -> Verifier -> Module -> A -> L option

LoopInvGen S V is complete if, given a module m and an assertion a, if there is an
function that is invariant on m, and that proves a, then LoopInvGen m a will
return such an invariant.

(* What's the proper name for this *)
LoopInvGen S V is kinda sound if, given a module m and an assertion a, if there is no
function that is invariant on m, and that proves a, then LoopInvGen m a will
not return an invariant.

LoopInvGen S V is sound if, given a module m and an assertion a, if there is no
function that is invariant on m, and that proves a, then LoopInvGen m a will
return None.



Theorem: If S and V are complete, then LoopInvGen is complete
Theorem: If S and V are sound, then LoopInvGen is kinda sound



Synthesizer:
sig
  synthesize :: L -> 
end

Fix V a verifier
Fix S a synthesizer


Algorithm:
G = {}
synthesize_invariant(thm : theorem, M : Module) :=
  G = {}
  loop
    I = generate_precondition(thm,G)
    foreach (f in Module):
      strengthened_or_ex = inductive_strengthen(I,f,G)
      match strengthened_or_ex with
      | Left strengthened -> I = strengthened
      | Right ex -> G = G U {ex}
  return I



inductive_strengthen(I : formula, f : function, G : set)
  while I is not inductive on f:
    counterexample_option = verify_boundary(I,f,G)
    match example_option with
    | Some ex -> return Right ex
    | None ->
        phi = x = f(v_1,...,v_n)
              /\ I(x)
              /\ (/\_{v_i \in T} I(v_i))
        I' = generate_precondition(phi, G)
        if I' = true then
          return Left I
        else
          I = I /\ I'



generate_precondition(thm : theorem, G : set t)
  B = {}
  loop
    P = Synthesize(G,B)
    examples_option = Verify(thm[forall (x:t | inv(x)) / forall (x:t)])
    match examples_option with
    | None -> return P
    | Some ex_vect -> B = B U {ex_vect}



verify_boundary(I : formula, f : function, G : set)
  in_G v = (\/_{g \in G} v = g)
  phi = x = f(v_1,...,v_n)
          /\ I(x)
          /\ (/\_{v_i \in T} in_G(v_i))
  return Verify(phi)


Conjectures:
If the Verifier and Synthesizer are Sound + Complete + Always terminate, then
so does the algorithm if there is such an invariant
