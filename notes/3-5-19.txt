Given a module with one abstract data type:
module M =
struct
  type T = type
  fun_1 :: type_1 = expr_1
  ...
  fun_n :: type_n = expr_n
end

and a formula phi over function symbols in M

Synthesize a function f : T -> bool such that for all e \in T

f(e) => phi(e)
phi is inductive for all functions fun_1 ... fun_n
T_c is concrete T
T_a is abstract T

t1 -> t2
B
T_a ~~~> {x | x \in T_c /\ f(x) }

Look at Bob Harper's PFPL, how does he set up proofs of parametricity

Might be better not in context of real modules, formalize instead in System F
Might be better to do as an existential formalization
Might be better not in module structure, adding existential / polymorphism may be more complex
List of function, type abbreviation, and formalize in that way instead of as a formal type


START FINDING EXAMPLES IN ANDREW APPEL'S WEBSITE



Fix V a verifier
Fix S a synthesizer


Algorithm:
G = {}
synthesize_invariant(phi : formula, M : Module) :=
  G = {}
  loop
    I = generate_precondition(phi,G)
    foreach (f in Module):
      strengthened_or_ex = inductive_strengthen(I,f,G)
      match strengthened_or_ex with
      | Left strengthened -> I = strengthened
      | Right ex -> G = G U {ex}
  return I



inductive_strengthen(I : formula, f : function, G : set)
  while I is not inductive on f:
    counterexample_option = verify_boundary(I,f,G)
    match example_option with
    | Some ex -> return Right ex
    | None ->
        phi = x = f(v_1,...,v_n)
              /\ I(x)
              /\ (/\_{v_i \in T} I(v_i))
        I' = generate_precondition(phi, G)
        if I' = true then
          return Left I
        else
          I = I /\ I'



generate_precondition(phi : formula, G : set)
  B = {}
  loop
    P = Synthesize(((g,true) forall g in G) ++ ((b,false) forall b in B))
    example_option = Verify(P => phi)
    match example_option with
    | None -> return P
    | Some ex -> B = B U {ex}



verify_boundary(I : formula, f : function, G : set)
  in_G v = (\/_{g \in G} v = g)
  phi = x = f(v_1,...,v_n)
          /\ I(x)
          /\ (/\_{v_i \in T} in_G(v_i))
  return Verify(phi)


Conjectures:
If the Verifier and Synthesizer are Sound + Complete + Always terminate, then so does the algorithm if there is such an invariant
