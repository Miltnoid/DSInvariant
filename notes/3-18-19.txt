Problem :=
{declarations}
{module} : {signature} maintaining {theorem}

declarations :=
  | type {id} = {type} {declarations}
  | let {id} = {exp};; {declarations}
  | .

module := struct {declarations} end

signature := sig type t {val_reqs} end
val_reqs :=
  | val {id} = {exp} {val_reqs}
  | .

{theorem} :=
  | forall ({id} : {type}) {theorem}
  | {expr}     (* must have type bool, when FVs filled in with appropriate types *)


Our goal: find a function inv : module.t -> bool such that
1) forall t. inv(t) => theorem  (* TODO: make theorem take n vars, then replace *)
2) inv is inductive on module : sig

A function inv : M.t -> bool is inductive on M : S if
there exists a module M' such that
1. computational_content(M') = M
2. M' is well typed with signature S', defined below:

signature S' =
sig
  type t = Sigma (x:T) inv(x) = True
  val_reqs
end

TODO:
re-phrase
Def: M is inductive w.r.t. inv and signature S iff
--------------------------------------------------------
M =
module
  type a = t
  let x_1 = v_1
  ...
  let x_n = v_n
end

and |- M : S
and
exists M' = module
  type a = { x:t | inv(x) }
  let x_1 = v_1
  ...
  let x_n = v_n
end
and |- M : S

TODO: approach 2, maybe try doing something more specialized to the problem

TODO: look at Dave's class's notes, define a logical relation
Unary logical relation, don't look at the binary one


Fix V a verifier
Fix S a synthesizer


Algorithm:
G = {}
synthesize_invariant(thm : theorem, M : Module) :=
  G = {}
  loop
    I = generate_precondition(thm,G)
    foreach (f in Module):
      strengthened_or_ex = inductive_strengthen(I,f,G)
      match strengthened_or_ex with
      | Left strengthened -> I = strengthened
      | Right ex -> G = G U {ex}
  return I



inductive_strengthen(I : formula, f : function, G : set)
  while I is not inductive on f:
    counterexample_option = verify_boundary(I,f,G)
    match example_option with
    | Some ex -> return Right ex
    | None ->
        phi = x = f(v_1,...,v_n)
              /\ I(x)
              /\ (/\_{v_i \in T} I(v_i))
        I' = generate_precondition(phi, G)
        if I' = true then
          return Left I
        else
          I = I /\ I'



generate_precondition(thm : theorem, G : set t)
  B = {}
  loop
    P = Synthesize(G,B)
    examples_option = Verify(thm[forall (x:t | inv(x)) / forall (x:t)])
    match examples_option with
    | None -> return P
    | Some ex_vect -> B = B U {ex_vect}



verify_boundary(I : formula, f : function, G : set)
  in_G v = (\/_{g \in G} v = g)
  phi = x = f(v_1,...,v_n)
          /\ I(x)
          /\ (/\_{v_i \in T} in_G(v_i))
  return Verify(phi)


Conjectures:
If the Verifier and Synthesizer are Sound + Complete + Always terminate, then
so does the algorithm if there is such an invariant


TODO: useful additions --- high level description of assumptions, TODOs, algorithm, and open questions.
