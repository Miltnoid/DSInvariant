Bit of a brain dump to follow, sorry if it is unstructured and saying obvious
things.

So in general, the problem we are trying to address is proving certain
properties of the functions on the data structure. However, these properties are
not always held. As an extended example, consider the module:

module IntSet = struct
  type T = Node of (int * t * t) | Leaf
  to_list t = match t with
    | Leaf -> []
    | Node(k,t1,t2) -> k::(to_list t1 ++ to_list t2)
  insert k t = match t with
    | Leaf -> Node(k,Leaf,Leaf)
    | Node(k',t1,t2) ->
      if (k < k') then Node (k', insert k t1, t2)
      else if (k > k') then Node (k', t1, insert k t2)
      else t
  delete k t = match t with
    | Leaf -> Leaf
    | Node(k',t1,t2) ->
      if (k < k') then Node (k', delete k t1, t2)
      else if (k > k') then Node (k', t1, delete k t2)
      else fold_left
             (fun x acc -> insert x acc)
             t2
             (to_list t1)
  contains k t = match t with
    | Leaf -> false
    | Node(k',t1,t2) ->
      if (k < k') then contains k t1
      else if (k > k') then contains k t2
      else true
end

So there are a few desirable properties for this:
forall t in T, k in Int, contains k (insert k t) = true
forall t in T, k in Int, contains k (delete k t) = false

The key portion for the invariant generation system is in the quantification
over t, a naive system would try to prove this over all t in the type: Node of
(int * t * t) | Leaf. However, these properties are not true over the whole
general type, but only over the ones generated by the program. We want to find a
predicate that:
1) Is inductive (aka, if it is true on an input to the module's functions, it is
true on the resulting outputs of module's functions)
2) Is sufficiently strong to prove the desired property.

Consider the first property: 
forall t in T, k in Int, contains k (insert k t) = true

For this property, True is a sufficiently strong predicate, there's no need to
have a stronger invariant, as both insert and contains will follow the same path
to the key.

Consider the second property:
forall t in T, k in Int, contains k (delete k t) = false

For this property, True is not a sufficiently strong predicate. This would then
bring us to the CEGAR-like loop of the loop system, though it would have the
additional challenges that it requires a verifier stronger than any that exist
(if we wish to be complete) and also a version of the precondition generator
that can generate inductive predicates.

So I guess the big thing that I realized from going through this extended
example is that trying to generate invariants for data structures alone isn't
really something that makes sense to ask, instead we only are looking for the
invariant insofar as it is needed to prove the property.

There's a lot of properties that I think are like these in the coq standard
library, and in the VFA portion of Software Foundations.

In VFA (maybe not in the standard library, I'm not sure), most of these theorems
are not proven directly, but instead proven through showing the module is
equivalent to a reference implementation, which has already been proven correct.
I'm not sure if, when doing these proofs automatically, it is easier to prove
directly, or to prove equivalent to a reference implementation.

So, in proving two modules equivalent, it seems like the same thing: with 2
differences.

1. Instead of manually writing the desired properties, they can be inferred from
the module signature.

2. The invariant is not a predicate over just one type, but over two.


Now, this current way I wrote about it involves some sort of awesome verifier
that works on algebraic data types and involves recursion. This is probably
never going to happen, so I tried to also find an example that may work using Z3
and real verifiers. The example is inspired from Fiat, where they implement a
cache. Their theorems permit leakiness. We can implement such a cache as well.

module Cache = struct
  type (K,V) T =
  {
    store : Maybe (K, V) array ;
    start : int ref     ;
  }

  empty : unit -> T
  empty =
  {
    store = new (Maybe (K, V))[10] ;
    end   = ref 0       ;
  }

  lookup_index k t =
    let lookup_index_internal current_index =
      if t.store[current_index].1 == Some k then
        Some current_index
      let next_index = current_pos + 1 % 10 in
      if next_index <> !start then
        lookup_index_internal next_index
      else
        None

  insert k v t =
    match lookup_index k t with
      | None ->
        t.store[!t.start] <- Some (k,v);
        t.start <- !t.start + 1 % 10
      | Some i ->
        t.store[i] <- Some (k,v)

  lookup k v t =
    match lookup_index k t with
      | None -> None
      | Some i -> (Option.value t.store[i]).2

  delete k t =
    match lookup_index k t with
      | None -> ()
      | Some i -> t.store[i] <- None
end

This leaky cache doesn't have arbitrary recursion or anything like that, so I
think Z3 could verify things about it.

Some desirable properties would be
forall t, k, v1, v2. v1 <> v2 => lookup k (insert k v2 (insert k v1 t)) <> Some v2

forall t, k, v. lookup k (delete k t) != Some v

As before, the first should be able to be proven with True, but the second
requires inferring the invariant that there are no duplicate entries.


Related Work:
Invariants of arrays and lists:
http://pub.ist.ac.at/~cezarad/cav10.pdf
https://ieeexplore.ieee.org/document/7589791
https://dl.acm.org/citation.cfm?id=2875942

Determining when to break invariants (and guaranteeing they eventually are fixed):
https://www.cs.cmu.edu/~dkurilov/papers/gpce13.pdf

Determining when invariants checks may be needed:
https://arxiv.org/abs/1511.04846
