(* Generated Wed Dec 31 11:17:18 2014 *)
let arith : exp -> nat =
  let rec f1 (e1:exp) : nat =
    match e1 with
      | Const n1 -> n1
      | Sum (e2, e3) -> sum (f1 e3) (f1 e2)
      | Prod (e2, e3) -> mult (f1 e3) (f1 e2)
      | Pred e2 -> minus (f1 e2) S O
      | Max (e2, e3) -> (match f1 e2 with
                           | O -> f1 e3
                           | S n1 -> S (sum (minus (f1 e3) S n1) n1))
      | Minus (e2, e3) -> minus (f1 e2) (f1 e3)
  in
    f1
;;
